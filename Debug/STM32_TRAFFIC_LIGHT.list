
STM32_TRAFFIC_LIGHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004454  08004454  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004454  08004454  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004454  08004454  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004458  08004458  00014458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800445c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  080044b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080044b8  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f62  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f6c  00000000  00000000  0002a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092f  00000000  00000000  0002cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ab4  00000000  00000000  0002d4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d30a  00000000  00000000  00044f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088064  00000000  00000000  00052285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000359c  00000000  00000000  000da2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000dd888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800431c 	.word	0x0800431c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800431c 	.word	0x0800431c

0800014c <LCD_START>:
unsigned char var1;
int led_lr=0;
int button_lr;
int pre_lr=0;
////////////////////////////////////////////////////////
void LCD_START(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    if(tt==6||tt1==6){
 8000150:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <LCD_START+0x44>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b06      	cmp	r3, #6
 8000156:	d003      	beq.n	8000160 <LCD_START+0x14>
 8000158:	4b0e      	ldr	r3, [pc, #56]	; (8000194 <LCD_START+0x48>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	2b06      	cmp	r3, #6
 800015e:	d107      	bne.n	8000170 <LCD_START+0x24>
    	LCD(L1,0);
 8000160:	2100      	movs	r1, #0
 8000162:	20c0      	movs	r0, #192	; 0xc0
 8000164:	f000 fff8 	bl	8001158 <LCD>
    	LCD_str("STATUS: WARNING");
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <LCD_START+0x4c>)
 800016a:	f001 f875 	bl	8001258 <LCD_str>
 800016e:	e006      	b.n	800017e <LCD_START+0x32>
    }else{
    	LCD(L1,0);
 8000170:	2100      	movs	r1, #0
 8000172:	20c0      	movs	r0, #192	; 0xc0
 8000174:	f000 fff0 	bl	8001158 <LCD>
    	LCD_str("STATUS: AUTO");
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <LCD_START+0x50>)
 800017a:	f001 f86d 	bl	8001258 <LCD_str>
    }
	   LCD(L2,0);
 800017e:	2100      	movs	r1, #0
 8000180:	2094      	movs	r0, #148	; 0x94
 8000182:	f000 ffe9 	bl	8001158 <LCD>
	   LCD_str("Enter password:");
 8000186:	4806      	ldr	r0, [pc, #24]	; (80001a0 <LCD_START+0x54>)
 8000188:	f001 f866 	bl	8001258 <LCD_str>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000078 	.word	0x20000078
 8000194:	2000007c 	.word	0x2000007c
 8000198:	08004334 	.word	0x08004334
 800019c:	08004344 	.word	0x08004344
 80001a0:	08004354 	.word	0x08004354

080001a4 <check_key>:

///////////////////////CHECK KEYPAD///////////////
void check_key(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	var1 = key_press();
 80001a8:	f000 fd70 	bl	8000c8c <key_press>
 80001ac:	4603      	mov	r3, r0
 80001ae:	461a      	mov	r2, r3
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <check_key+0x24>)
 80001b2:	701a      	strb	r2, [r3, #0]
	Disp_pass_key(var1);
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <check_key+0x24>)
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 fe2d 	bl	8000e18 <Disp_pass_key>
	HAL_Delay(200);
 80001be:	20c8      	movs	r0, #200	; 0xc8
 80001c0:	f001 f968 	bl	8001494 <HAL_Delay>
}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	200001ac 	.word	0x200001ac

080001cc <real_time>:
///////////////////////RTC_REALTIME/////////////////////
void real_time(){
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2100      	movs	r1, #0
 80001d6:	460a      	mov	r2, r1
 80001d8:	801a      	strh	r2, [r3, #0]
 80001da:	460a      	mov	r2, r1
 80001dc:	709a      	strb	r2, [r3, #2]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2200      	movs	r2, #0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4826      	ldr	r0, [pc, #152]	; (8000280 <real_time+0xb4>)
 80001e6:	f002 fae3 	bl	80027b0 <HAL_RTC_GetTime>
    RTC_DateTypeDef DateToUpdate = {0};
 80001ea:	2300      	movs	r3, #0
 80001ec:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80001ee:	463b      	mov	r3, r7
 80001f0:	2200      	movs	r2, #0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4822      	ldr	r0, [pc, #136]	; (8000280 <real_time+0xb4>)
 80001f6:	f002 fc69 	bl	8002acc <HAL_RTC_GetDate>
	if(k==1){
 80001fa:	4b22      	ldr	r3, [pc, #136]	; (8000284 <real_time+0xb8>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d125      	bne.n	800024e <real_time+0x82>
    sprintf(lcd_data_1,"TIME: %02d:%02d:%02d",sTime.Hours,sTime.Minutes,sTime.Seconds);
 8000202:	793b      	ldrb	r3, [r7, #4]
 8000204:	461a      	mov	r2, r3
 8000206:	797b      	ldrb	r3, [r7, #5]
 8000208:	4619      	mov	r1, r3
 800020a:	79bb      	ldrb	r3, [r7, #6]
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	460b      	mov	r3, r1
 8000210:	491d      	ldr	r1, [pc, #116]	; (8000288 <real_time+0xbc>)
 8000212:	481e      	ldr	r0, [pc, #120]	; (800028c <real_time+0xc0>)
 8000214:	f003 fbd0 	bl	80039b8 <siprintf>
    LCD(L1,0);
 8000218:	2100      	movs	r1, #0
 800021a:	20c0      	movs	r0, #192	; 0xc0
 800021c:	f000 ff9c 	bl	8001158 <LCD>
    LCD_str(lcd_data_1);
 8000220:	481a      	ldr	r0, [pc, #104]	; (800028c <real_time+0xc0>)
 8000222:	f001 f819 	bl	8001258 <LCD_str>

    sprintf(lcd_data_2,"DATE: %02d/%02d/%04d",DateToUpdate.Date,DateToUpdate.Month,2000+DateToUpdate.Year);
 8000226:	78bb      	ldrb	r3, [r7, #2]
 8000228:	461a      	mov	r2, r3
 800022a:	787b      	ldrb	r3, [r7, #1]
 800022c:	4619      	mov	r1, r3
 800022e:	78fb      	ldrb	r3, [r7, #3]
 8000230:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	460b      	mov	r3, r1
 8000238:	4915      	ldr	r1, [pc, #84]	; (8000290 <real_time+0xc4>)
 800023a:	4816      	ldr	r0, [pc, #88]	; (8000294 <real_time+0xc8>)
 800023c:	f003 fbbc 	bl	80039b8 <siprintf>
	LCD(L0,0);
 8000240:	2100      	movs	r1, #0
 8000242:	2080      	movs	r0, #128	; 0x80
 8000244:	f000 ff88 	bl	8001158 <LCD>
	LCD_str(lcd_data_2);
 8000248:	4812      	ldr	r0, [pc, #72]	; (8000294 <real_time+0xc8>)
 800024a:	f001 f805 	bl	8001258 <LCD_str>
	}
    if(k==0){
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <real_time+0xb8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d10f      	bne.n	8000276 <real_time+0xaa>
    	if(sTime.Hours>=22||sTime.Hours<=4){
 8000256:	793b      	ldrb	r3, [r7, #4]
 8000258:	2b15      	cmp	r3, #21
 800025a:	d802      	bhi.n	8000262 <real_time+0x96>
 800025c:	793b      	ldrb	r3, [r7, #4]
 800025e:	2b04      	cmp	r3, #4
 8000260:	d809      	bhi.n	8000276 <real_time+0xaa>
    		tt=6;
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <real_time+0xcc>)
 8000264:	2206      	movs	r2, #6
 8000266:	601a      	str	r2, [r3, #0]
    		tt1=6;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <real_time+0xd0>)
 800026a:	2206      	movs	r2, #6
 800026c:	601a      	str	r2, [r3, #0]
    		second=-1;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <real_time+0xd4>)
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	601a      	str	r2, [r3, #0]
        }
    }
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000088 	.word	0x20000088
 8000284:	20000084 	.word	0x20000084
 8000288:	08004364 	.word	0x08004364
 800028c:	2000009c 	.word	0x2000009c
 8000290:	0800437c 	.word	0x0800437c
 8000294:	20000100 	.word	0x20000100
 8000298:	20000078 	.word	0x20000078
 800029c:	2000007c 	.word	0x2000007c
 80002a0:	20000080 	.word	0x20000080

080002a4 <real_date>:
void real_date(){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8
    RTC_DateTypeDef DateToUpdate = {0};
 80002aa:	2300      	movs	r3, #0
 80002ac:	607b      	str	r3, [r7, #4]
	HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	4619      	mov	r1, r3
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <real_date+0x48>)
 80002b6:	f002 fc09 	bl	8002acc <HAL_RTC_GetDate>
    sprintf(lcd_data_2,"DATE: %02d/%02d/%04d",DateToUpdate.Date,DateToUpdate.Month,2000+DateToUpdate.Year);
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	461a      	mov	r2, r3
 80002be:	797b      	ldrb	r3, [r7, #5]
 80002c0:	4619      	mov	r1, r3
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	4908      	ldr	r1, [pc, #32]	; (80002f0 <real_date+0x4c>)
 80002ce:	4809      	ldr	r0, [pc, #36]	; (80002f4 <real_date+0x50>)
 80002d0:	f003 fb72 	bl	80039b8 <siprintf>
	LCD(L0,0);
 80002d4:	2100      	movs	r1, #0
 80002d6:	2080      	movs	r0, #128	; 0x80
 80002d8:	f000 ff3e 	bl	8001158 <LCD>
	LCD_str(lcd_data_2);
 80002dc:	4805      	ldr	r0, [pc, #20]	; (80002f4 <real_date+0x50>)
 80002de:	f000 ffbb 	bl	8001258 <LCD_str>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000088 	.word	0x20000088
 80002f0:	0800437c 	.word	0x0800437c
 80002f4:	20000100 	.word	0x20000100

080002f8 <auto_light_lr>:
/* USER CODE BEGIN 0 */
void auto_light_lr(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	   /////////////button red.//////////////
	  if(k==1){
 80002fc:	4b86      	ldr	r3, [pc, #536]	; (8000518 <auto_light_lr+0x220>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d15d      	bne.n	80003c0 <auto_light_lr+0xc8>
	     button_lr = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12); ///red
 8000304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000308:	4884      	ldr	r0, [pc, #528]	; (800051c <auto_light_lr+0x224>)
 800030a:	f001 fb71 	bl	80019f0 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b83      	ldr	r3, [pc, #524]	; (8000520 <auto_light_lr+0x228>)
 8000314:	601a      	str	r2, [r3, #0]
	    if(button_lr==1&&pre_lr==0){
 8000316:	4b82      	ldr	r3, [pc, #520]	; (8000520 <auto_light_lr+0x228>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d110      	bne.n	8000340 <auto_light_lr+0x48>
 800031e:	4b81      	ldr	r3, [pc, #516]	; (8000524 <auto_light_lr+0x22c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10c      	bne.n	8000340 <auto_light_lr+0x48>
	      if(led_lr==0){
 8000326:	4b80      	ldr	r3, [pc, #512]	; (8000528 <auto_light_lr+0x230>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d108      	bne.n	8000340 <auto_light_lr+0x48>
	         tt=4;
 800032e:	4b7f      	ldr	r3, [pc, #508]	; (800052c <auto_light_lr+0x234>)
 8000330:	2204      	movs	r2, #4
 8000332:	601a      	str	r2, [r3, #0]
	         tt1=5;
 8000334:	4b7e      	ldr	r3, [pc, #504]	; (8000530 <auto_light_lr+0x238>)
 8000336:	2205      	movs	r2, #5
 8000338:	601a      	str	r2, [r3, #0]
	         second=1;
 800033a:	4b7e      	ldr	r3, [pc, #504]	; (8000534 <auto_light_lr+0x23c>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]
	      }
	    }
        button_lr = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13);///green
 8000340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000344:	4875      	ldr	r0, [pc, #468]	; (800051c <auto_light_lr+0x224>)
 8000346:	f001 fb53 	bl	80019f0 <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	461a      	mov	r2, r3
 800034e:	4b74      	ldr	r3, [pc, #464]	; (8000520 <auto_light_lr+0x228>)
 8000350:	601a      	str	r2, [r3, #0]
             if(button_lr==1&&pre_lr==0){
 8000352:	4b73      	ldr	r3, [pc, #460]	; (8000520 <auto_light_lr+0x228>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d110      	bne.n	800037c <auto_light_lr+0x84>
 800035a:	4b72      	ldr	r3, [pc, #456]	; (8000524 <auto_light_lr+0x22c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d10c      	bne.n	800037c <auto_light_lr+0x84>
               if(led_lr==0){
 8000362:	4b71      	ldr	r3, [pc, #452]	; (8000528 <auto_light_lr+0x230>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d108      	bne.n	800037c <auto_light_lr+0x84>
                  tt=0;
 800036a:	4b70      	ldr	r3, [pc, #448]	; (800052c <auto_light_lr+0x234>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
                  tt1=0;
 8000370:	4b6f      	ldr	r3, [pc, #444]	; (8000530 <auto_light_lr+0x238>)
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
                  second=1;
 8000376:	4b6f      	ldr	r3, [pc, #444]	; (8000534 <auto_light_lr+0x23c>)
 8000378:	2201      	movs	r2, #1
 800037a:	601a      	str	r2, [r3, #0]
               }
             }
        	  //////////////////////WARNING////////
        button_lr = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_14); ///red
 800037c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000380:	486d      	ldr	r0, [pc, #436]	; (8000538 <auto_light_lr+0x240>)
 8000382:	f001 fb35 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <auto_light_lr+0x228>)
 800038c:	601a      	str	r2, [r3, #0]
        	 	    if(button_lr==1&&pre_lr==0){
 800038e:	4b64      	ldr	r3, [pc, #400]	; (8000520 <auto_light_lr+0x228>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d110      	bne.n	80003b8 <auto_light_lr+0xc0>
 8000396:	4b63      	ldr	r3, [pc, #396]	; (8000524 <auto_light_lr+0x22c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d10c      	bne.n	80003b8 <auto_light_lr+0xc0>
        	 	      if(led_lr==0){
 800039e:	4b62      	ldr	r3, [pc, #392]	; (8000528 <auto_light_lr+0x230>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d108      	bne.n	80003b8 <auto_light_lr+0xc0>
        	 	         tt=0;
 80003a6:	4b61      	ldr	r3, [pc, #388]	; (800052c <auto_light_lr+0x234>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
        	 	         tt1=0;
 80003ac:	4b60      	ldr	r3, [pc, #384]	; (8000530 <auto_light_lr+0x238>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
        	 	         second=1;
 80003b2:	4b60      	ldr	r3, [pc, #384]	; (8000534 <auto_light_lr+0x23c>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
        	 	      }
        	 	    }
           pre_lr=button_lr;
 80003b8:	4b59      	ldr	r3, [pc, #356]	; (8000520 <auto_light_lr+0x228>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a59      	ldr	r2, [pc, #356]	; (8000524 <auto_light_lr+0x22c>)
 80003be:	6013      	str	r3, [r2, #0]
	  }

   switch(tt){
 80003c0:	4b5a      	ldr	r3, [pc, #360]	; (800052c <auto_light_lr+0x234>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b06      	cmp	r3, #6
 80003c6:	f200 809e 	bhi.w	8000506 <auto_light_lr+0x20e>
 80003ca:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <auto_light_lr+0xd8>)
 80003cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d0:	080003ed 	.word	0x080003ed
 80003d4:	080003fd 	.word	0x080003fd
 80003d8:	08000439 	.word	0x08000439
 80003dc:	08000473 	.word	0x08000473
 80003e0:	080004af 	.word	0x080004af
 80003e4:	080004d5 	.word	0x080004d5
 80003e8:	080004fb 	.word	0x080004fb
   case 0: //TT start
	tt=1;
 80003ec:	4b4f      	ldr	r3, [pc, #316]	; (800052c <auto_light_lr+0x234>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	601a      	str	r2, [r3, #0]
   set_timer1(500);
 80003f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f6:	f000 ff47 	bl	8001288 <set_timer1>
   break;
 80003fa:	e08b      	b.n	8000514 <auto_light_lr+0x21c>
   case 1: //red
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,1);   //RED
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	484d      	ldr	r0, [pc, #308]	; (8000538 <auto_light_lr+0x240>)
 8000404:	f001 fb0b 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,0);   //YELLOW
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800040e:	484b      	ldr	r0, [pc, #300]	; (800053c <auto_light_lr+0x244>)
 8000410:	f001 fb05 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,0);  //GREEN
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041a:	4848      	ldr	r0, [pc, #288]	; (800053c <auto_light_lr+0x244>)
 800041c:	f001 faff 	bl	8001a1e <HAL_GPIO_WritePin>

      //het time led red
      if(timer1_flag==1){
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <auto_light_lr+0x248>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d170      	bne.n	800050a <auto_light_lr+0x212>
             tt=2;
 8000428:	4b40      	ldr	r3, [pc, #256]	; (800052c <auto_light_lr+0x234>)
 800042a:	2202      	movs	r2, #2
 800042c:	601a      	str	r2, [r3, #0]
          set_timer1(300);
 800042e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000432:	f000 ff29 	bl	8001288 <set_timer1>
      }
       ///button green
   break;
 8000436:	e068      	b.n	800050a <auto_light_lr+0x212>
   case 2: //green
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,0);   //RED
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043e:	483e      	ldr	r0, [pc, #248]	; (8000538 <auto_light_lr+0x240>)
 8000440:	f001 faed 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,0);   //YELLOW
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044a:	483c      	ldr	r0, [pc, #240]	; (800053c <auto_light_lr+0x244>)
 800044c:	f001 fae7 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,1);  //GREEN
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000456:	4839      	ldr	r0, [pc, #228]	; (800053c <auto_light_lr+0x244>)
 8000458:	f001 fae1 	bl	8001a1e <HAL_GPIO_WritePin>

      //het time led green
      if(timer1_flag==1){
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <auto_light_lr+0x248>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d154      	bne.n	800050e <auto_light_lr+0x216>
            tt=3;
 8000464:	4b31      	ldr	r3, [pc, #196]	; (800052c <auto_light_lr+0x234>)
 8000466:	2203      	movs	r2, #3
 8000468:	601a      	str	r2, [r3, #0]
            set_timer1(200);
 800046a:	20c8      	movs	r0, #200	; 0xc8
 800046c:	f000 ff0c 	bl	8001288 <set_timer1>
      }
     break;
 8000470:	e04d      	b.n	800050e <auto_light_lr+0x216>
   case 3: //yellow
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,0);   //RED
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	482f      	ldr	r0, [pc, #188]	; (8000538 <auto_light_lr+0x240>)
 800047a:	f001 fad0 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,1);   //YELLOW
 800047e:	2201      	movs	r2, #1
 8000480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000484:	482d      	ldr	r0, [pc, #180]	; (800053c <auto_light_lr+0x244>)
 8000486:	f001 faca 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,0);  //GREEN
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000490:	482a      	ldr	r0, [pc, #168]	; (800053c <auto_light_lr+0x244>)
 8000492:	f001 fac4 	bl	8001a1e <HAL_GPIO_WritePin>

         //het time led yellow
         if(timer1_flag==1){
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <auto_light_lr+0x248>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d139      	bne.n	8000512 <auto_light_lr+0x21a>
            tt=1;
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <auto_light_lr+0x234>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	601a      	str	r2, [r3, #0]
            set_timer1(500);
 80004a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a8:	f000 feee 	bl	8001288 <set_timer1>
         }
   break;
 80004ac:	e031      	b.n	8000512 <auto_light_lr+0x21a>
    ///////////control////////////
    case 4: //control red
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,1);   //RED
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b4:	4820      	ldr	r0, [pc, #128]	; (8000538 <auto_light_lr+0x240>)
 80004b6:	f001 fab2 	bl	8001a1e <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,0);   //YELLOW
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c0:	481e      	ldr	r0, [pc, #120]	; (800053c <auto_light_lr+0x244>)
 80004c2:	f001 faac 	bl	8001a1e <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,0);  //GREEN
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004cc:	481b      	ldr	r0, [pc, #108]	; (800053c <auto_light_lr+0x244>)
 80004ce:	f001 faa6 	bl	8001a1e <HAL_GPIO_WritePin>
   break;
 80004d2:	e01f      	b.n	8000514 <auto_light_lr+0x21c>
    case 5: //control green
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,0);   //RED
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004da:	4817      	ldr	r0, [pc, #92]	; (8000538 <auto_light_lr+0x240>)
 80004dc:	f001 fa9f 	bl	8001a1e <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,0);   //YELLOW
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e6:	4815      	ldr	r0, [pc, #84]	; (800053c <auto_light_lr+0x244>)
 80004e8:	f001 fa99 	bl	8001a1e <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,1);  //GREEN
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4812      	ldr	r0, [pc, #72]	; (800053c <auto_light_lr+0x244>)
 80004f4:	f001 fa93 	bl	8001a1e <HAL_GPIO_WritePin>
   break;
 80004f8:	e00c      	b.n	8000514 <auto_light_lr+0x21c>
    case 6:
    	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);   //YELLOW
 80004fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004fe:	480f      	ldr	r0, [pc, #60]	; (800053c <auto_light_lr+0x244>)
 8000500:	f001 faa5 	bl	8001a4e <HAL_GPIO_TogglePin>
    break;
 8000504:	e006      	b.n	8000514 <auto_light_lr+0x21c>
   default:
   break;
 8000506:	bf00      	nop
 8000508:	e004      	b.n	8000514 <auto_light_lr+0x21c>
   break;
 800050a:	bf00      	nop
 800050c:	e002      	b.n	8000514 <auto_light_lr+0x21c>
     break;
 800050e:	bf00      	nop
 8000510:	e000      	b.n	8000514 <auto_light_lr+0x21c>
   break;
 8000512:	bf00      	nop
   }
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000084 	.word	0x20000084
 800051c:	40010c00 	.word	0x40010c00
 8000520:	200001b4 	.word	0x200001b4
 8000524:	200001b8 	.word	0x200001b8
 8000528:	200001b0 	.word	0x200001b0
 800052c:	20000078 	.word	0x20000078
 8000530:	2000007c 	.word	0x2000007c
 8000534:	20000080 	.word	0x20000080
 8000538:	40010800 	.word	0x40010800
 800053c:	40011000 	.word	0x40011000
 8000540:	200001d0 	.word	0x200001d0

08000544 <auto_light_ud>:

void auto_light_ud(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

           /////////////button red.//////////////
   if(k==1){
 8000548:	4b76      	ldr	r3, [pc, #472]	; (8000724 <auto_light_ud+0x1e0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d13c      	bne.n	80005ca <auto_light_ud+0x86>
          button_lr = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14);
 8000550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000554:	4874      	ldr	r0, [pc, #464]	; (8000728 <auto_light_ud+0x1e4>)
 8000556:	f001 fa4b 	bl	80019f0 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b73      	ldr	r3, [pc, #460]	; (800072c <auto_light_ud+0x1e8>)
 8000560:	601a      	str	r2, [r3, #0]
           if(button_lr==1&&pre_lr==0){
 8000562:	4b72      	ldr	r3, [pc, #456]	; (800072c <auto_light_ud+0x1e8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d110      	bne.n	800058c <auto_light_ud+0x48>
 800056a:	4b71      	ldr	r3, [pc, #452]	; (8000730 <auto_light_ud+0x1ec>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10c      	bne.n	800058c <auto_light_ud+0x48>
             if(led_lr==0){
 8000572:	4b70      	ldr	r3, [pc, #448]	; (8000734 <auto_light_ud+0x1f0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d108      	bne.n	800058c <auto_light_ud+0x48>
                tt=5;
 800057a:	4b6f      	ldr	r3, [pc, #444]	; (8000738 <auto_light_ud+0x1f4>)
 800057c:	2205      	movs	r2, #5
 800057e:	601a      	str	r2, [r3, #0]
                tt1=4;
 8000580:	4b6e      	ldr	r3, [pc, #440]	; (800073c <auto_light_ud+0x1f8>)
 8000582:	2204      	movs	r2, #4
 8000584:	601a      	str	r2, [r3, #0]
                second=0;
 8000586:	4b6e      	ldr	r3, [pc, #440]	; (8000740 <auto_light_ud+0x1fc>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
             }
           }

   ///////////////////button green//////////////////
          button_lr = HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15);
 800058c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000590:	4865      	ldr	r0, [pc, #404]	; (8000728 <auto_light_ud+0x1e4>)
 8000592:	f001 fa2d 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	461a      	mov	r2, r3
 800059a:	4b64      	ldr	r3, [pc, #400]	; (800072c <auto_light_ud+0x1e8>)
 800059c:	601a      	str	r2, [r3, #0]
                 if(button_lr==1&&pre_lr==0){
 800059e:	4b63      	ldr	r3, [pc, #396]	; (800072c <auto_light_ud+0x1e8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d10d      	bne.n	80005c2 <auto_light_ud+0x7e>
 80005a6:	4b62      	ldr	r3, [pc, #392]	; (8000730 <auto_light_ud+0x1ec>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d109      	bne.n	80005c2 <auto_light_ud+0x7e>
                   if(led_lr==0){
 80005ae:	4b61      	ldr	r3, [pc, #388]	; (8000734 <auto_light_ud+0x1f0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d105      	bne.n	80005c2 <auto_light_ud+0x7e>
                      tt1=0;
 80005b6:	4b61      	ldr	r3, [pc, #388]	; (800073c <auto_light_ud+0x1f8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
                      tt=0;
 80005bc:	4b5e      	ldr	r3, [pc, #376]	; (8000738 <auto_light_ud+0x1f4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]

                   }
                 }
                 pre_lr=button_lr;
 80005c2:	4b5a      	ldr	r3, [pc, #360]	; (800072c <auto_light_ud+0x1e8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a5a      	ldr	r2, [pc, #360]	; (8000730 <auto_light_ud+0x1ec>)
 80005c8:	6013      	str	r3, [r2, #0]
         }

   switch(tt1){
 80005ca:	4b5c      	ldr	r3, [pc, #368]	; (800073c <auto_light_ud+0x1f8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	f200 809f 	bhi.w	8000712 <auto_light_ud+0x1ce>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <auto_light_ud+0x98>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	080005f9 	.word	0x080005f9
 80005e0:	08000609 	.word	0x08000609
 80005e4:	08000645 	.word	0x08000645
 80005e8:	0800067f 	.word	0x0800067f
 80005ec:	080006bb 	.word	0x080006bb
 80005f0:	080006e1 	.word	0x080006e1
 80005f4:	08000707 	.word	0x08000707
   case 0: //TT start
   tt1=2;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <auto_light_ud+0x1f8>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
   set_timer2(300);
 80005fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000602:	f000 fe55 	bl	80012b0 <set_timer2>
   break;
 8000606:	e08b      	b.n	8000720 <auto_light_ud+0x1dc>
   case 1: //red
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);     //RED
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060e:	4846      	ldr	r0, [pc, #280]	; (8000728 <auto_light_ud+0x1e4>)
 8000610:	f001 fa05 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);   //YELLOW
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061a:	4843      	ldr	r0, [pc, #268]	; (8000728 <auto_light_ud+0x1e4>)
 800061c:	f001 f9ff 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,0);  //GREEN
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000626:	4840      	ldr	r0, [pc, #256]	; (8000728 <auto_light_ud+0x1e4>)
 8000628:	f001 f9f9 	bl	8001a1e <HAL_GPIO_WritePin>

      //het time led red
      if(timer2_flag==1){
 800062c:	4b45      	ldr	r3, [pc, #276]	; (8000744 <auto_light_ud+0x200>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d170      	bne.n	8000716 <auto_light_ud+0x1d2>
             tt1=2;
 8000634:	4b41      	ldr	r3, [pc, #260]	; (800073c <auto_light_ud+0x1f8>)
 8000636:	2202      	movs	r2, #2
 8000638:	601a      	str	r2, [r3, #0]
            set_timer2(300);
 800063a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800063e:	f000 fe37 	bl	80012b0 <set_timer2>
            }
   break;
 8000642:	e068      	b.n	8000716 <auto_light_ud+0x1d2>
   case 2: //green
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);     //RED
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	4837      	ldr	r0, [pc, #220]	; (8000728 <auto_light_ud+0x1e4>)
 800064c:	f001 f9e7 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);   //YELLOW
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000656:	4834      	ldr	r0, [pc, #208]	; (8000728 <auto_light_ud+0x1e4>)
 8000658:	f001 f9e1 	bl	8001a1e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,1);  //GREEN
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000662:	4831      	ldr	r0, [pc, #196]	; (8000728 <auto_light_ud+0x1e4>)
 8000664:	f001 f9db 	bl	8001a1e <HAL_GPIO_WritePin>

      //het time led green
      if(timer2_flag==1){
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <auto_light_ud+0x200>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d154      	bne.n	800071a <auto_light_ud+0x1d6>
            tt1=3;
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <auto_light_ud+0x1f8>)
 8000672:	2203      	movs	r2, #3
 8000674:	601a      	str	r2, [r3, #0]
            set_timer2(200);
 8000676:	20c8      	movs	r0, #200	; 0xc8
 8000678:	f000 fe1a 	bl	80012b0 <set_timer2>
      }

     break;
 800067c:	e04d      	b.n	800071a <auto_light_ud+0x1d6>
   case 3: //yellow
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);   //RED
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	4828      	ldr	r0, [pc, #160]	; (8000728 <auto_light_ud+0x1e4>)
 8000686:	f001 f9ca 	bl	8001a1e <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,1);   //YELLOW
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	4825      	ldr	r0, [pc, #148]	; (8000728 <auto_light_ud+0x1e4>)
 8000692:	f001 f9c4 	bl	8001a1e <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,0);  //GREEN
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800069c:	4822      	ldr	r0, [pc, #136]	; (8000728 <auto_light_ud+0x1e4>)
 800069e:	f001 f9be 	bl	8001a1e <HAL_GPIO_WritePin>
         //het time led yellow
         if(timer2_flag==1){
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <auto_light_ud+0x200>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d139      	bne.n	800071e <auto_light_ud+0x1da>
            tt1=1;
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <auto_light_ud+0x1f8>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
            set_timer2(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f000 fdfc 	bl	80012b0 <set_timer2>
         }
      break;
 80006b8:	e031      	b.n	800071e <auto_light_ud+0x1da>
      ////////////control//////////
     case 4: //control red
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);   //RED
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c0:	4819      	ldr	r0, [pc, #100]	; (8000728 <auto_light_ud+0x1e4>)
 80006c2:	f001 f9ac 	bl	8001a1e <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);   //YELLOW
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4816      	ldr	r0, [pc, #88]	; (8000728 <auto_light_ud+0x1e4>)
 80006ce:	f001 f9a6 	bl	8001a1e <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,0);  //GREEN
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <auto_light_ud+0x1e4>)
 80006da:	f001 f9a0 	bl	8001a1e <HAL_GPIO_WritePin>
      break;
 80006de:	e01f      	b.n	8000720 <auto_light_ud+0x1dc>
       case 5: //control GREEN
           HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,0);   //RED
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <auto_light_ud+0x1e4>)
 80006e8:	f001 f999 	bl	8001a1e <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,0);   //YELLOW
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <auto_light_ud+0x1e4>)
 80006f4:	f001 f993 	bl	8001a1e <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,1);  //GREEN
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <auto_light_ud+0x1e4>)
 8000700:	f001 f98d 	bl	8001a1e <HAL_GPIO_WritePin>
      break;
 8000704:	e00c      	b.n	8000720 <auto_light_ud+0x1dc>
       case 6:
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);   //YELLOW
 8000706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <auto_light_ud+0x1e4>)
 800070c:	f001 f99f 	bl	8001a4e <HAL_GPIO_TogglePin>
      break;
 8000710:	e006      	b.n	8000720 <auto_light_ud+0x1dc>
    default:
    break;
 8000712:	bf00      	nop
 8000714:	e004      	b.n	8000720 <auto_light_ud+0x1dc>
   break;
 8000716:	bf00      	nop
 8000718:	e002      	b.n	8000720 <auto_light_ud+0x1dc>
     break;
 800071a:	bf00      	nop
 800071c:	e000      	b.n	8000720 <auto_light_ud+0x1dc>
      break;
 800071e:	bf00      	nop
   }
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	40010c00 	.word	0x40010c00
 800072c:	200001b4 	.word	0x200001b4
 8000730:	200001b8 	.word	0x200001b8
 8000734:	200001b0 	.word	0x200001b0
 8000738:	20000078 	.word	0x20000078
 800073c:	2000007c 	.word	0x2000007c
 8000740:	20000080 	.word	0x20000080
 8000744:	200001d8 	.word	0x200001d8

08000748 <clock>:
void clock(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
   if(timer3_flag==1){
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <clock+0x3c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d10e      	bne.n	8000772 <clock+0x2a>
       second++;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <clock+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <clock+0x40>)
 800075c:	6013      	str	r3, [r2, #0]
       set_timer3(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f000 fdba 	bl	80012d8 <set_timer3>
      if(second>5){
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <clock+0x40>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b05      	cmp	r3, #5
 800076a:	dd02      	ble.n	8000772 <clock+0x2a>
         second=1;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <clock+0x40>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
      }
   }
   Display_7SegLed_1(second,1);
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <clock+0x40>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fa33 	bl	8000be4 <Display_7SegLed_1>
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001e0 	.word	0x200001e0
 8000788:	20000080 	.word	0x20000080

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	   k=0;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <main+0x78>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000796:	f000 fe1b 	bl	80013d0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800079a:	f000 f839 	bl	8000810 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079e:	f000 f93b 	bl	8000a18 <MX_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	211b      	movs	r1, #27
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <main+0x7c>)
 80007a8:	f001 f939 	bl	8001a1e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80007b2:	4815      	ldr	r0, [pc, #84]	; (8000808 <main+0x7c>)
 80007b4:	f001 f933 	bl	8001a1e <HAL_GPIO_WritePin>
  ////////////////TIMER////////////////////////
   MX_TIM2_Init();
 80007b8:	f000 f8e2 	bl	8000980 <MX_TIM2_Init>
   HAL_TIM_Base_Start_IT(&htim2); // Start timer ở CHE DO NGAT
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <main+0x80>)
 80007be:	f002 fd63 	bl	8003288 <HAL_TIM_Base_Start_IT>
   MX_RTC_Init();
 80007c2:	f000 f879 	bl	80008b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE LCD BEGIN///*/
   LCD_init();
 80007c6:	f000 fcaf 	bl	8001128 <LCD_init>
   real_date();
 80007ca:	f7ff fd6b 	bl	80002a4 <real_date>
   LCD_START();
 80007ce:	f7ff fcbd 	bl	800014c <LCD_START>
   //////////////////////////////////////////
   set_timer1(3);
 80007d2:	2003      	movs	r0, #3
 80007d4:	f000 fd58 	bl	8001288 <set_timer1>
   set_timer2(2);
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 fd69 	bl	80012b0 <set_timer2>
   set_timer3(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fd7a 	bl	80012d8 <set_timer3>
   Display_7SegLed_1(0,1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 f9fc 	bl	8000be4 <Display_7SegLed_1>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
            clock();
 80007ec:	f7ff ffac 	bl	8000748 <clock>
	 	  	auto_light_lr();
 80007f0:	f7ff fd82 	bl	80002f8 <auto_light_lr>
	 	    auto_light_ud();
 80007f4:	f7ff fea6 	bl	8000544 <auto_light_ud>
	        check_key();
 80007f8:	f7ff fcd4 	bl	80001a4 <check_key>
	        real_time();
 80007fc:	f7ff fce6 	bl	80001cc <real_time>
            clock();
 8000800:	e7f4      	b.n	80007ec <main+0x60>
 8000802:	bf00      	nop
 8000804:	20000084 	.word	0x20000084
 8000808:	40010c00 	.word	0x40010c00
 800080c:	20000164 	.word	0x20000164

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081a:	2228      	movs	r2, #40	; 0x28
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 f8ea 	bl	80039f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000840:	230a      	movs	r3, #10
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800084c:	2301      	movs	r3, #1
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000858:	4618      	mov	r0, r3
 800085a:	f001 f91d 	bl	8001a98 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000864:	f000 fb72 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fb8a 	bl	8001f9c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800088e:	f000 fb5d 	bl	8000f4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000892:	2301      	movs	r3, #1
 8000894:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 fcf6 	bl	8002290 <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008aa:	f000 fb4f 	bl	8000f4c <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2100      	movs	r1, #0
 80008c4:	460a      	mov	r2, r1
 80008c6:	801a      	strh	r2, [r3, #0]
 80008c8:	460a      	mov	r2, r1
 80008ca:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <MX_RTC_Init+0xc0>)
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_RTC_Init+0xc4>)
 80008dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_RTC_Init+0xc0>)
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <MX_RTC_Init+0xc0>)
 80008e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_RTC_Init+0xc0>)
 80008f0:	f001 fe3a 	bl	8002568 <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 fb27 	bl	8000f4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80008fe:	2312      	movs	r3, #18
 8000900:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x00;
 8000902:	2300      	movs	r3, #0
 8000904:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x00;
 8000906:	2300      	movs	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2201      	movs	r2, #1
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	; (8000978 <MX_RTC_Init+0xc0>)
 8000914:	f001 feb4 	bl	8002680 <HAL_RTC_SetTime>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 fb15 	bl	8000f4c <Error_Handler>
  }


  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000922:	2305      	movs	r3, #5
 8000924:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month =0x10;
 8000926:	2310      	movs	r3, #16
 8000928:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x29;
 800092a:	2329      	movs	r3, #41	; 0x29
 800092c:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x23;
 800092e:	2323      	movs	r3, #35	; 0x23
 8000930:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <MX_RTC_Init+0xc0>)
 800093c:	f002 f810 	bl	8002960 <HAL_RTC_SetDate>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000946:	f000 fb01 	bl	8000f4c <Error_Handler>
  }

  /** Enable the Alarm A*/
  sAlarm.AlarmTime.Hours = 0x15;
 800094a:	2315      	movs	r3, #21
 800094c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x23;
 800094e:	2323      	movs	r3, #35	; 0x23
 8000950:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x01;
 8000952:	2301      	movs	r3, #1
 8000954:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	2201      	movs	r2, #1
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_RTC_Init+0xc0>)
 8000962:	f002 f907 	bl	8002b74 <HAL_RTC_SetAlarm>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800096c:	f000 faee 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000088 	.word	0x20000088
 800097c:	40002800 	.word	0x40002800

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM2_Init+0x94>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009a6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009b4:	2209      	movs	r2, #9
 80009b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009c6:	f002 fc0f 	bl	80031e8 <HAL_TIM_Base_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009d0:	f000 fabc 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009e2:	f002 fda5 	bl	8003530 <HAL_TIM_ConfigClockSource>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009ec:	f000 faae 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_TIM2_Init+0x94>)
 80009fe:	f002 ff71 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 faa0 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000164 	.word	0x20000164

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b43      	ldr	r3, [pc, #268]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a3f      	ldr	r2, [pc, #252]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b37      	ldr	r3, [pc, #220]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a33      	ldr	r2, [pc, #204]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a7a:	f043 0308 	orr.w	r3, r3, #8
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <MX_GPIO_Init+0x130>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0308 	and.w	r3, r3, #8
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a92:	482e      	ldr	r0, [pc, #184]	; (8000b4c <MX_GPIO_Init+0x134>)
 8000a94:	f000 ffc3 	bl	8001a1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8000a9e:	482c      	ldr	r0, [pc, #176]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000aa0:	f000 ffbd 	bl	8001a1e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f640 71fb 	movw	r1, #4091	; 0xffb
 8000aaa:	482a      	ldr	r0, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000aac:	f000 ffb7 	bl	8001a1e <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ab0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <MX_GPIO_Init+0x134>)
 8000aca:	f000 fe15 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ace:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000ad2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000ae8:	f000 fe06 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000aec:	f640 73fb 	movw	r3, #4091	; 0xffb
 8000af0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000b06:	f000 fdf7 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_GPIO_Init+0x13c>)
 8000b20:	f000 fdea 	bl	80016f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_GPIO_Init+0x138>)
 8000b3a:	f000 fddd 	bl	80016f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    timer_run();
 8000b60:	f000 fbce 	bl	8001300 <timer_run>
 }
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ShiftOut.0>:
////////////////////////LED7DOAN///////////////////////////////////////////

void Display_7SegLed_1(uint32_t Value_Display, uint8_t NumLed) {
    const unsigned char ma7doan_CA[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 };
   goto Label_Display_7SegLed;
   void ShiftOut(uint8_t Value_Shift) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	f8c7 c000 	str.w	ip, [r7]
      for (int i = 7; i >= 0; i--) {
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	e026      	b.n	8000bce <ShiftOut.0+0x62>
         HAL_GPIO_WritePin(GPIO_DS_1, PIN_DS_1, __Get_Bit_1(Value_Shift, i));
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	fa42 f303 	asr.w	r3, r2, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b96:	4812      	ldr	r0, [pc, #72]	; (8000be0 <ShiftOut.0+0x74>)
 8000b98:	f000 ff41 	bl	8001a1e <HAL_GPIO_WritePin>
         __NOP();
 8000b9c:	bf00      	nop
         ///////////////////tao CLK////////////////////////////
         HAL_GPIO_WritePin(GPIO_SHCP_1, PIN_SHCP_1, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <ShiftOut.0+0x74>)
 8000ba6:	f000 ff3a 	bl	8001a1e <HAL_GPIO_WritePin>
         __NOP();
 8000baa:	bf00      	nop
         HAL_GPIO_WritePin(GPIO_SHCP_1, PIN_SHCP_1, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <ShiftOut.0+0x74>)
 8000bb4:	f000 ff33 	bl	8001a1e <HAL_GPIO_WritePin>
         __NOP();
 8000bb8:	bf00      	nop
         HAL_GPIO_WritePin(GPIO_SHCP_1, PIN_SHCP_1, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <ShiftOut.0+0x74>)
 8000bc2:	f000 ff2c 	bl	8001a1e <HAL_GPIO_WritePin>
         __NOP();
 8000bc6:	bf00      	nop
      for (int i = 7; i >= 0; i--) {
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dad5      	bge.n	8000b80 <ShiftOut.0+0x14>
      }
   }
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010800 	.word	0x40010800

08000be4 <Display_7SegLed_1>:
void Display_7SegLed_1(uint32_t Value_Display, uint8_t NumLed) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
 8000bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf4:	60fb      	str	r3, [r7, #12]
    const unsigned char ma7doan_CA[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90 };
 8000bf6:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <Display_7SegLed_1+0x9c>)
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bfe:	c303      	stmia	r3!, {r0, r1}
 8000c00:	801a      	strh	r2, [r3, #0]
   goto Label_Display_7SegLed;
 8000c02:	bf00      	nop
   Label_Display_7SegLed: //start Display_7SegLed
   for (int i = 0; i < NumLed; i++) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	e01d      	b.n	8000c46 <Display_7SegLed_1+0x62>
      ShiftOut(ma7doan_CA[Value_Display % 10]);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <Display_7SegLed_1+0xa0>)
 8000c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	1aca      	subs	r2, r1, r3
 8000c1e:	f102 0320 	add.w	r3, r2, #32
 8000c22:	443b      	add	r3, r7
 8000c24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c28:	f107 020c 	add.w	r2, r7, #12
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff9c 	bl	8000b6c <ShiftOut.0>
      Value_Display = Value_Display / 10;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <Display_7SegLed_1+0xa0>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	607b      	str	r3, [r7, #4]
   for (int i = 0; i < NumLed; i++) {
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	3301      	adds	r3, #1
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	69fa      	ldr	r2, [r7, #28]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dbdd      	blt.n	8000c0a <Display_7SegLed_1+0x26>
   }
   ///////////////////////tao CLK//////////////////
   HAL_GPIO_WritePin(GPIO_STCP_1, PIN_STCP_1, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <Display_7SegLed_1+0xa4>)
 8000c56:	f000 fee2 	bl	8001a1e <HAL_GPIO_WritePin>
   __NOP();
 8000c5a:	bf00      	nop
   HAL_GPIO_WritePin(GPIO_STCP_1, PIN_STCP_1, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <Display_7SegLed_1+0xa4>)
 8000c64:	f000 fedb 	bl	8001a1e <HAL_GPIO_WritePin>
   __NOP();
 8000c68:	bf00      	nop
   HAL_GPIO_WritePin(GPIO_STCP_1, PIN_STCP_1, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <Display_7SegLed_1+0xa4>)
 8000c72:	f000 fed4 	bl	8001a1e <HAL_GPIO_WritePin>
   __NOP();
 8000c76:	bf00      	nop
}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	08004394 	.word	0x08004394
 8000c84:	cccccccd 	.word	0xcccccccd
 8000c88:	40010800 	.word	0x40010800

08000c8c <key_press>:

/* USER CODE BEGIN 4 */
unsigned char key_press(void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
   unsigned char clm_var;
   unsigned char key_arr[] = {7, 8, 9, 15, 4, 5, 6, 14, 1, 2, 3, 13, 10, 0, 11, 12};
 8000c92:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <key_press+0xb4>)
 8000c94:	1d3c      	adds	r4, r7, #4
 8000c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0)
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4829      	ldr	r0, [pc, #164]	; (8000d44 <key_press+0xb8>)
 8000ca0:	f000 fea6 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <key_press+0x36>
   {
      clm_var = check_clm(GPIO_PIN_0);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 f84c 	bl	8000d48 <check_clm>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	75fb      	strb	r3, [r7, #23]
      return key_arr[clm_var-1];
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	3318      	adds	r3, #24
 8000cba:	443b      	add	r3, r7
 8000cbc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000cc0:	e039      	b.n	8000d36 <key_press+0xaa>
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	481f      	ldr	r0, [pc, #124]	; (8000d44 <key_press+0xb8>)
 8000cc6:	f000 fe93 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <key_press+0x5c>
   {
      clm_var = check_clm(GPIO_PIN_1);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f000 f839 	bl	8000d48 <check_clm>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
      return key_arr[clm_var+3];
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	3303      	adds	r3, #3
 8000cde:	3318      	adds	r3, #24
 8000ce0:	443b      	add	r3, r7
 8000ce2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ce6:	e026      	b.n	8000d36 <key_press+0xaa>
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4816      	ldr	r0, [pc, #88]	; (8000d44 <key_press+0xb8>)
 8000cec:	f000 fe80 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10b      	bne.n	8000d0e <key_press+0x82>
   {
      clm_var = check_clm(GPIO_PIN_3);
 8000cf6:	2008      	movs	r0, #8
 8000cf8:	f000 f826 	bl	8000d48 <check_clm>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	75fb      	strb	r3, [r7, #23]
      return key_arr[clm_var+7];
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	3307      	adds	r3, #7
 8000d04:	3318      	adds	r3, #24
 8000d06:	443b      	add	r3, r7
 8000d08:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d0c:	e013      	b.n	8000d36 <key_press+0xaa>
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4) == 0)
 8000d0e:	2110      	movs	r1, #16
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <key_press+0xb8>)
 8000d12:	f000 fe6d 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10b      	bne.n	8000d34 <key_press+0xa8>
   {
      clm_var = check_clm(GPIO_PIN_4);
 8000d1c:	2010      	movs	r0, #16
 8000d1e:	f000 f813 	bl	8000d48 <check_clm>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
      return key_arr[clm_var+11];
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	330b      	adds	r3, #11
 8000d2a:	3318      	adds	r3, #24
 8000d2c:	443b      	add	r3, r7
 8000d2e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000d32:	e000      	b.n	8000d36 <key_press+0xaa>
   }
   else
      return 16;
 8000d34:	2310      	movs	r3, #16
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	371c      	adds	r7, #28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	080043a0 	.word	0x080043a0
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <check_clm>:

unsigned char check_clm(unsigned char pin_var)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
   unsigned char clm;
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);      //Set all columns to logic 1 ie connected to Vcc
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000d58:	482e      	ldr	r0, [pc, #184]	; (8000e14 <check_clm+0xcc>)
 8000d5a:	f000 fe60 	bl	8001a1e <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);                  //set first column to Gnd
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	482c      	ldr	r0, [pc, #176]	; (8000e14 <check_clm+0xcc>)
 8000d64:	f000 fe5b 	bl	8001a1e <HAL_GPIO_WritePin>
   if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4829      	ldr	r0, [pc, #164]	; (8000e14 <check_clm+0xcc>)
 8000d70:	f000 fe3e 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <check_clm+0x36>
      clm = 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <check_clm+0xcc>)
 8000d84:	f000 fe4b 	bl	8001a1e <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);                  //set second column to Gnd
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4821      	ldr	r0, [pc, #132]	; (8000e14 <check_clm+0xcc>)
 8000d8e:	f000 fe46 	bl	8001a1e <HAL_GPIO_WritePin>
   if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	481e      	ldr	r0, [pc, #120]	; (8000e14 <check_clm+0xcc>)
 8000d9a:	f000 fe29 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <check_clm+0x60>
      clm = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <check_clm+0xcc>)
 8000dae:	f000 fe36 	bl	8001a1e <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);                  //set third column to Gnd
 8000db2:	2200      	movs	r2, #0
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	4817      	ldr	r0, [pc, #92]	; (8000e14 <check_clm+0xcc>)
 8000db8:	f000 fe31 	bl	8001a1e <HAL_GPIO_WritePin>
   if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <check_clm+0xcc>)
 8000dc4:	f000 fe14 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <check_clm+0x8a>
      clm = 3;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	480f      	ldr	r0, [pc, #60]	; (8000e14 <check_clm+0xcc>)
 8000dd8:	f000 fe21 	bl	8001a1e <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);                  //set fourth column to Gnd
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <check_clm+0xcc>)
 8000de4:	f000 fe1b 	bl	8001a1e <HAL_GPIO_WritePin>
   if(HAL_GPIO_ReadPin(GPIOB, pin_var) == 0)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4619      	mov	r1, r3
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <check_clm+0xcc>)
 8000df0:	f000 fdfe 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <check_clm+0xb6>
      clm = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);      //Set all columns to logic 0 ie connected to GND
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <check_clm+0xcc>)
 8000e06:	f000 fe0a 	bl	8001a1e <HAL_GPIO_WritePin>
   return clm;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <Disp_pass_key>:

void Disp_pass_key(unsigned char key_var)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
   static unsigned char pass_var1 = 0;
   static unsigned char key_arr[5];
   unsigned char enter_key[5] = {"12345"};
 8000e22:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <Disp_pass_key+0x110>)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2c:	6018      	str	r0, [r3, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	7019      	strb	r1, [r3, #0]
   unsigned char i;

   if(key_var != 16)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d072      	beq.n	8000f1e <Disp_pass_key+0x106>
   {
      key_arr[pass_var1] = key_var + 48;
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <Disp_pass_key+0x114>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	3330      	adds	r3, #48	; 0x30
 8000e42:	b2d9      	uxtb	r1, r3
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <Disp_pass_key+0x118>)
 8000e46:	5499      	strb	r1, [r3, r2]
      LCD(key_var + 48, 1);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	3330      	adds	r3, #48	; 0x30
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f981 	bl	8001158 <LCD>
      pass_var1++;
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <Disp_pass_key+0x114>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <Disp_pass_key+0x114>)
 8000e60:	701a      	strb	r2, [r3, #0]
      if(pass_var1 == 5)
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <Disp_pass_key+0x114>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	d159      	bne.n	8000f1e <Disp_pass_key+0x106>
      {
         LCD(L3, 0);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	20d4      	movs	r0, #212	; 0xd4
 8000e6e:	f000 f973 	bl	8001158 <LCD>
         for(i=0;i<5;i++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e01b      	b.n	8000eb0 <Disp_pass_key+0x98>
         {
            if(key_arr[i] != enter_key[i])
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	4a2d      	ldr	r2, [pc, #180]	; (8000f30 <Disp_pass_key+0x118>)
 8000e7c:	5cd2      	ldrb	r2, [r2, r3]
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	3310      	adds	r3, #16
 8000e82:	443b      	add	r3, r7
 8000e84:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d00e      	beq.n	8000eaa <Disp_pass_key+0x92>
            {
               LCD(0x01, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 f962 	bl	8001158 <LCD>
               LCD(L0+5,0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2085      	movs	r0, #133	; 0x85
 8000e98:	f000 f95e 	bl	8001158 <LCD>
               LCD_str("Re-enter pw");
 8000e9c:	4825      	ldr	r0, [pc, #148]	; (8000f34 <Disp_pass_key+0x11c>)
 8000e9e:	f000 f9db 	bl	8001258 <LCD_str>
               pass_var1 = 0;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <Disp_pass_key+0x114>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
               break;
 8000ea8:	e005      	b.n	8000eb6 <Disp_pass_key+0x9e>
         for(i=0;i<5;i++)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	3301      	adds	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d9e0      	bls.n	8000e78 <Disp_pass_key+0x60>
            }
         }
         if(i == 5)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	d113      	bne.n	8000ee4 <Disp_pass_key+0xcc>
         {
     	   LCD(0x01, 0);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 f94a 	bl	8001158 <LCD>
           LCD(L0+5,0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2085      	movs	r0, #133	; 0x85
 8000ec8:	f000 f946 	bl	8001158 <LCD>
           LCD_str("Welcome!!!!");
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <Disp_pass_key+0x120>)
 8000ece:	f000 f9c3 	bl	8001258 <LCD_str>
     	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed8:	4818      	ldr	r0, [pc, #96]	; (8000f3c <Disp_pass_key+0x124>)
 8000eda:	f000 fda0 	bl	8001a1e <HAL_GPIO_WritePin>
     	   k=1;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <Disp_pass_key+0x128>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
         }
         HAL_Delay(500);
 8000ee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee8:	f000 fad4 	bl	8001494 <HAL_Delay>
         pass_var1 = 0;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <Disp_pass_key+0x114>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
         LCD(0x01, 0);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 f92f 	bl	8001158 <LCD>
         real_time();
 8000efa:	f7ff f967 	bl	80001cc <real_time>
         real_date();
 8000efe:	f7ff f9d1 	bl	80002a4 <real_date>
         LCD(L2, 0);
 8000f02:	2100      	movs	r1, #0
 8000f04:	2094      	movs	r0, #148	; 0x94
 8000f06:	f000 f927 	bl	8001158 <LCD>
         LCD_str("STATUS: CONTROL");
 8000f0a:	480e      	ldr	r0, [pc, #56]	; (8000f44 <Disp_pass_key+0x12c>)
 8000f0c:	f000 f9a4 	bl	8001258 <LCD_str>
         LCD(L3,0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	20d4      	movs	r0, #212	; 0xd4
 8000f14:	f000 f920 	bl	8001158 <LCD>
 		 LCD_str("Enter password:");
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <Disp_pass_key+0x130>)
 8000f1a:	f000 f99d 	bl	8001258 <LCD_str>
      }
   }
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	080043d8 	.word	0x080043d8
 8000f2c:	200001bc 	.word	0x200001bc
 8000f30:	200001c0 	.word	0x200001c0
 8000f34:	080043b0 	.word	0x080043b0
 8000f38:	080043bc 	.word	0x080043bc
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	20000084 	.word	0x20000084
 8000f44:	080043c8 	.word	0x080043c8
 8000f48:	08004354 	.word	0x08004354

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_MspInit+0x60>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_MspInit+0x60>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000

08000fbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_RTC_MspInit+0x3c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d110      	bne.n	8000ff0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000fce:	f000 fd57 	bl	8001a80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_RTC_MspInit+0x40>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_RTC_MspInit+0x40>)
 8000fd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_RTC_MspInit+0x40>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_RTC_MspInit+0x44>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40002800 	.word	0x40002800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	4242043c 	.word	0x4242043c

08001004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	d113      	bne.n	800103e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	201c      	movs	r0, #28
 8001034:	f000 fb29 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001038:	201c      	movs	r0, #28
 800103a:	f000 fb42 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f9e3 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM2_IRQHandler+0x10>)
 80010a2:	f002 f93d 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000164 	.word	0x20000164

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f002 fc92 	bl	8003a08 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20002800 	.word	0x20002800
 8001110:	00000400 	.word	0x00000400
 8001114:	200001c8 	.word	0x200001c8
 8001118:	20000330 	.word	0x20000330

0800111c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LCD_init>:
 *      Author: lytha
 */
#include "user_lcd.h"

void LCD_init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
   LCD(0x38, 0);         //2 lines, 5*7 matrix
 800112c:	2100      	movs	r1, #0
 800112e:	2038      	movs	r0, #56	; 0x38
 8001130:	f000 f812 	bl	8001158 <LCD>
   LCD(0x0C, 0);         //Display on, cursor off
 8001134:	2100      	movs	r1, #0
 8001136:	200c      	movs	r0, #12
 8001138:	f000 f80e 	bl	8001158 <LCD>
   //LCD(0x0E, 0);         //Display on, cursor blinking
   LCD(0x06, 0);         //Increment cursor (shift cursor to right)
 800113c:	2100      	movs	r1, #0
 800113e:	2006      	movs	r0, #6
 8001140:	f000 f80a 	bl	8001158 <LCD>
   LCD(0x01, 0);         //Clear display screen
 8001144:	2100      	movs	r1, #0
 8001146:	2001      	movs	r0, #1
 8001148:	f000 f806 	bl	8001158 <LCD>
   LCD(0x80, 0);         //Force cursor to beginning ( 1st line)
 800114c:	2100      	movs	r1, #0
 800114e:	2080      	movs	r0, #128	; 0x80
 8001150:	f000 f802 	bl	8001158 <LCD>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <LCD>:

void LCD(uint8_t val_1, uint8_t cmd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	460a      	mov	r2, r1
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
   uint8_t data1;

   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, cmd);         //set RS = cmd; (cmd=0) => Command; (cmd=1) => Data
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	461a      	mov	r2, r3
 800116c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001170:	4838      	ldr	r0, [pc, #224]	; (8001254 <LCD+0xfc>)
 8001172:	f000 fc54 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = val_1 & 0x01;                                          //mask bit and assign it to GPIO 0
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, data1);
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	461a      	mov	r2, r3
 8001182:	2101      	movs	r1, #1
 8001184:	4833      	ldr	r0, [pc, #204]	; (8001254 <LCD+0xfc>)
 8001186:	f000 fc4a 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>1) & 0x01;                                 //mask bit and assign it to GPIO 1
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	085b      	lsrs	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, data1);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	461a      	mov	r2, r3
 800119a:	2102      	movs	r1, #2
 800119c:	482d      	ldr	r0, [pc, #180]	; (8001254 <LCD+0xfc>)
 800119e:	f000 fc3e 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>2) & 0x01;                                 //mask bit and assign it to GPIO 2
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, data1);
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	461a      	mov	r2, r3
 80011b2:	2104      	movs	r1, #4
 80011b4:	4827      	ldr	r0, [pc, #156]	; (8001254 <LCD+0xfc>)
 80011b6:	f000 fc32 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>3) & 0x01;                                 //mask bit and assign it to GPIO 3
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, data1);
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2108      	movs	r1, #8
 80011cc:	4821      	ldr	r0, [pc, #132]	; (8001254 <LCD+0xfc>)
 80011ce:	f000 fc26 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>4) & 0x01;                                 //mask bit and assign it to GPIO 4
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, data1);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2110      	movs	r1, #16
 80011e4:	481b      	ldr	r0, [pc, #108]	; (8001254 <LCD+0xfc>)
 80011e6:	f000 fc1a 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>5) & 0x01;                                 //mask bit and assign it to GPIO 5
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, data1);
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2120      	movs	r1, #32
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <LCD+0xfc>)
 80011fe:	f000 fc0e 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>6) & 0x01;                                 //mask bit and assign it to GPIO 6
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, data1);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	461a      	mov	r2, r3
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <LCD+0xfc>)
 8001216:	f000 fc02 	bl	8001a1e <HAL_GPIO_WritePin>

   data1 = (val_1>>7) & 0x01;                                 //mask bit and assign it to GPIO 7
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	09db      	lsrs	r3, r3, #7
 800121e:	73fb      	strb	r3, [r7, #15]
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, data1);
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	461a      	mov	r2, r3
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	480b      	ldr	r0, [pc, #44]	; (8001254 <LCD+0xfc>)
 8001228:	f000 fbf9 	bl	8001a1e <HAL_GPIO_WritePin>

   //---------------------------------------------//
   //      Enable Pulse      //
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <LCD+0xfc>)
 8001234:	f000 fbf3 	bl	8001a1e <HAL_GPIO_WritePin>
   HAL_Delay(5);
 8001238:	2005      	movs	r0, #5
 800123a:	f000 f92b 	bl	8001494 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <LCD+0xfc>)
 8001246:	f000 fbea 	bl	8001a1e <HAL_GPIO_WritePin>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010800 	.word	0x40010800

08001258 <LCD_str>:

void LCD_str(unsigned char *str1)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
   while(*str1 != 0)
 8001260:	e008      	b.n	8001274 <LCD_str+0x1c>
   {
      LCD(*str1, 1);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff75 	bl	8001158 <LCD>
      str1++;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
   while(*str1 != 0)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f2      	bne.n	8001262 <LCD_str+0xa>
   }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <set_timer1>:

//timer 1
int timer1_counter=0;
int timer1_flag=0;

void set_timer1(int duration){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <set_timer1+0x20>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <set_timer1+0x24>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200001cc 	.word	0x200001cc
 80012ac:	200001d0 	.word	0x200001d0

080012b0 <set_timer2>:

//timer 2
int timer2_counter=0;
int timer2_flag=0;

void set_timer2(int duration){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <set_timer2+0x20>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <set_timer2+0x24>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200001d4 	.word	0x200001d4
 80012d4:	200001d8 	.word	0x200001d8

080012d8 <set_timer3>:

//timer 3
int timer3_counter=0;
int timer3_flag=0;

void set_timer3(int duration){
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 80012e0:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <set_timer3+0x20>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <set_timer3+0x24>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200001dc 	.word	0x200001dc
 80012fc:	200001e0 	.word	0x200001e0

08001300 <timer_run>:
///////////RUN TIMER//////////
void timer_run(){
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <timer_run+0x6c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd0b      	ble.n	8001324 <timer_run+0x24>
		timer1_counter--;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <timer_run+0x6c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <timer_run+0x6c>)
 8001314:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <timer_run+0x6c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dc02      	bgt.n	8001324 <timer_run+0x24>
		timer1_flag=1;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <timer_run+0x70>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter>0){
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <timer_run+0x74>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd0b      	ble.n	8001344 <timer_run+0x44>
		timer2_counter--;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <timer_run+0x74>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <timer_run+0x74>)
 8001334:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0)
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <timer_run+0x74>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	dc02      	bgt.n	8001344 <timer_run+0x44>
		timer2_flag=1;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <timer_run+0x78>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter>0){
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <timer_run+0x7c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dd0b      	ble.n	8001364 <timer_run+0x64>
		timer3_counter--;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <timer_run+0x7c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3b01      	subs	r3, #1
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <timer_run+0x7c>)
 8001354:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0)
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <timer_run+0x7c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	dc02      	bgt.n	8001364 <timer_run+0x64>
		timer3_flag=1;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <timer_run+0x80>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
	}


}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200001cc 	.word	0x200001cc
 8001370:	200001d0 	.word	0x200001d0
 8001374:	200001d4 	.word	0x200001d4
 8001378:	200001d8 	.word	0x200001d8
 800137c:	200001dc 	.word	0x200001dc
 8001380:	200001e0 	.word	0x200001e0

08001384 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001384:	f7ff feca 	bl	800111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800138a:	490c      	ldr	r1, [pc, #48]	; (80013bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013a0:	4c09      	ldr	r4, [pc, #36]	; (80013c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f002 fb31 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b2:	f7ff f9eb 	bl	800078c <main>
  bx lr
 80013b6:	4770      	bx	lr
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013c0:	0800445c 	.word	0x0800445c
  ldr r2, =_sbss
 80013c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013c8:	20000330 	.word	0x20000330

080013cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC1_2_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x28>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f947 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fdb4 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f95f 	bl	80016de <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f927 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_IncTick+0x20>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000008 	.word	0x20000008
 800147c:	200001e4 	.word	0x200001e4

08001480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_GetTick+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	200001e4 	.word	0x200001e4

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fff0 	bl	8001480 <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffe0 	bl	8001480 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <__NVIC_EnableIRQ+0x34>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff2d 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff42 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff35 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e161      	b.n	80019d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8150 	bne.w	80019ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a97      	ldr	r2, [pc, #604]	; (800198c <HAL_GPIO_Init+0x294>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d05e      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001734:	4a95      	ldr	r2, [pc, #596]	; (800198c <HAL_GPIO_Init+0x294>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d875      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800173a:	4a95      	ldr	r2, [pc, #596]	; (8001990 <HAL_GPIO_Init+0x298>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d058      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001740:	4a93      	ldr	r2, [pc, #588]	; (8001990 <HAL_GPIO_Init+0x298>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d86f      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001746:	4a93      	ldr	r2, [pc, #588]	; (8001994 <HAL_GPIO_Init+0x29c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d052      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 800174c:	4a91      	ldr	r2, [pc, #580]	; (8001994 <HAL_GPIO_Init+0x29c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d869      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001752:	4a91      	ldr	r2, [pc, #580]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04c      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001758:	4a8f      	ldr	r2, [pc, #572]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d863      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800175e:	4a8f      	ldr	r2, [pc, #572]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d046      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001764:	4a8d      	ldr	r2, [pc, #564]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d85d      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d82a      	bhi.n	80017c4 <HAL_GPIO_Init+0xcc>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d859      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_GPIO_Init+0x80>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017df 	.word	0x080017df
 8001784:	08001821 	.word	0x08001821
 8001788:	08001827 	.word	0x08001827
 800178c:	08001827 	.word	0x08001827
 8001790:	08001827 	.word	0x08001827
 8001794:	08001827 	.word	0x08001827
 8001798:	08001827 	.word	0x08001827
 800179c:	08001827 	.word	0x08001827
 80017a0:	08001827 	.word	0x08001827
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001827 	.word	0x08001827
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017e9 	.word	0x080017e9
 80017c4:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e02c      	b.n	8001826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e029      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	3304      	adds	r3, #4
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e024      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3308      	adds	r3, #8
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e01f      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e01a      	b.n	8001828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fa:	2304      	movs	r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e013      	b.n	8001828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	611a      	str	r2, [r3, #16]
          break;
 8001812:	e009      	b.n	8001828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	615a      	str	r2, [r3, #20]
          break;
 800181e:	e003      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x130>
          break;
 8001826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d801      	bhi.n	8001832 <HAL_GPIO_Init+0x13a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_Init+0x13e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d802      	bhi.n	8001844 <HAL_GPIO_Init+0x14c>
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x152>
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	210f      	movs	r1, #15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a9 	beq.w	80019ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001890:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2b4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d00d      	beq.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d007      	beq.n	80018d4 <HAL_GPIO_Init+0x1dc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_GPIO_Init+0x1d8>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1e2>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	492b      	ldr	r1, [pc, #172]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4927      	ldr	r1, [pc, #156]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4921      	ldr	r1, [pc, #132]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491d      	ldr	r1, [pc, #116]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4917      	ldr	r1, [pc, #92]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4913      	ldr	r1, [pc, #76]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800196c:	4013      	ands	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01f      	beq.n	80019bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e01f      	b.n	80019ca <HAL_GPIO_Init+0x2d2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_GPIO_Init+0x2f4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <HAL_GPIO_Init+0x2f4>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3301      	adds	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae96 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	372c      	adds	r7, #44	; 0x2c
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a2e:	787b      	ldrb	r3, [r7, #1]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3a:	e003      	b.n	8001a44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	041a      	lsls	r2, r3, #16
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	400b      	ands	r3, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	420e0020 	.word	0x420e0020

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e272      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
 8001ad0:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d168      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e24c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x76>
 8001b00:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xbc>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a71      	ldr	r2, [pc, #452]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc84 	bl	8001480 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fc80 	bl	8001480 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e200      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe4>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc70 	bl	8001480 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fc6c 	bl	8001480 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ec      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10c>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4939      	ldr	r1, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fc25 	bl	8001480 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fc21 	bl	8001480 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc04 	bl	8001480 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc00 	bl	8001480 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e180      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03a      	beq.n	8001d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fbe4 	bl	8001480 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fbe0 	bl	8001480 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e160      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 faba 	bl	8002254 <RCC_Delay>
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fbca 	bl	8001480 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fbc6 	bl	8001480 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d908      	bls.n	8001d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e146      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e9      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a6 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb87 	bl	8001480 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fb83 	bl	8001480 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e103      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x334>
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x356>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb37 	bl	8001480 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb33 	bl	8001480 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x37e>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb21 	bl	8001480 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb1d 	bl	8001480 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d061      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d146      	bne.n	8001f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff faf1 	bl	8001480 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff faed 	bl	8001480 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a19      	ldr	r1, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	430b      	orrs	r3, r1
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fac1 	bl	8001480 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fabd 	bl	8001480 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e03d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46a>
 8001f20:	e035      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff faaa 	bl	8001480 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff faa6 	bl	8001480 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e026      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x498>
 8001f4e:	e01e      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e019      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x500>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d0      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e073      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff f9f8 	bl	8001480 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff f9f4 	bl	8001480 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e053      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d210      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	490a      	ldr	r1, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f956 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	080043e0 	.word	0x080043e0
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x30>
 800219a:	2b08      	cmp	r3, #8
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x36>
 800219e:	e027      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	e027      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e004      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	613b      	str	r3, [r7, #16]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	693b      	ldr	r3, [r7, #16]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	007a1200 	.word	0x007a1200
 800220c:	080043f8 	.word	0x080043f8
 8002210:	08004408 	.word	0x08004408
 8002214:	003d0900 	.word	0x003d0900

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_GetHCLKFreq+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002230:	f7ff fff2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0adb      	lsrs	r3, r3, #11
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	080043f0 	.word	0x080043f0

08002254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <RCC_Delay+0x34>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <RCC_Delay+0x38>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002270:	bf00      	nop
  }
  while (Delay --);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <RCC_Delay+0x1c>
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000000 	.word	0x20000000
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d07d      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c6:	61d3      	str	r3, [r2, #28]
 80022c8:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d118      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f0:	f7ff f8c6 	bl	8001480 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	e008      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7ff f8c2 	bl	8001480 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e06d      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02e      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d027      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800234a:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff f891 	bl	8001480 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff f88d 	bl	8001480 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e036      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4917      	ldr	r1, [pc, #92]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	4313      	orrs	r3, r2
 8002394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	490b      	ldr	r1, [pc, #44]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42420440 	.word	0x42420440

080023fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b10      	cmp	r3, #16
 8002422:	f200 808a 	bhi.w	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d045      	beq.n	80024b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d075      	beq.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002432:	e082      	b.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800243a:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d07b      	beq.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a41      	ldr	r2, [pc, #260]	; (8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	4a3b      	ldr	r2, [pc, #236]	; (8002558 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002478:	4a38      	ldr	r2, [pc, #224]	; (800255c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	e004      	b.n	8002494 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a0:	d102      	bne.n	80024a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	61bb      	str	r3, [r7, #24]
      break;
 80024a6:	e04a      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4a2d      	ldr	r2, [pc, #180]	; (8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	61bb      	str	r3, [r7, #24]
      break;
 80024b6:	e042      	b.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d108      	bne.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d8:	61bb      	str	r3, [r7, #24]
 80024da:	e01f      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e6:	d109      	bne.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e00f      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002506:	d11c      	bne.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d016      	beq.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002514:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002518:	61bb      	str	r3, [r7, #24]
      break;
 800251a:	e012      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800251c:	e011      	b.n	8002542 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800251e:	f7ff fe85 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	0b9b      	lsrs	r3, r3, #14
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	3301      	adds	r3, #1
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
      break;
 8002538:	e004      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253a:	bf00      	nop
 800253c:	e002      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800253e:	bf00      	nop
 8002540:	e000      	b.n	8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002542:	bf00      	nop
    }
  }
  return (frequency);
 8002544:	69bb      	ldr	r3, [r7, #24]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	0800440c 	.word	0x0800440c
 8002558:	0800441c 	.word	0x0800441c
 800255c:	007a1200 	.word	0x007a1200
 8002560:	003d0900 	.word	0x003d0900
 8002564:	aaaaaaab 	.word	0xaaaaaaab

08002568 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07a      	b.n	8002674 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7c5b      	ldrb	r3, [r3, #17]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fd14 	bl	8000fbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fb83 	bl	8002ca6 <HAL_RTC_WaitForSynchro>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e061      	b.n	8002674 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fc3c 	bl	8002e2e <RTC_EnterInitMode>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e056      	b.n	8002674 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0207 	bic.w	r2, r2, #7
 80025d4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80025de:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_RTC_Init+0x114>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_RTC_Init+0x114>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RTC_Init+0x114>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	4921      	ldr	r1, [pc, #132]	; (800267c <HAL_RTC_Init+0x114>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d003      	beq.n	800260e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e00e      	b.n	800262c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800260e:	2001      	movs	r0, #1
 8002610:	f7ff fef4 	bl	80023fc <HAL_RCCEx_GetPeriphCLKFreq>
 8002614:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e026      	b.n	8002674 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b01      	subs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	0c1a      	lsrs	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f002 020f 	and.w	r2, r2, #15
 8002638:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	b292      	uxth	r2, r2
 8002642:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fc1a 	bl	8002e7e <RTC_ExitInitMode>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2204      	movs	r2, #4
 8002654:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00c      	b.n	8002674 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40006c00 	.word	0x40006c00

08002680 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_RTC_SetTime+0x20>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e080      	b.n	80027a6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	7c1b      	ldrb	r3, [r3, #16]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_RTC_SetTime+0x30>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e07a      	b.n	80027a6 <HAL_RTC_SetTime+0x126>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2202      	movs	r2, #2
 80026ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026cc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	4619      	mov	r1, r3
 80026d6:	460b      	mov	r3, r1
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026de:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e01e      	b.n	8002728 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fc0a 	bl	8002f08 <RTC_Bcd2ToByte>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026fc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	785b      	ldrb	r3, [r3, #1]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fbff 	bl	8002f08 <RTC_Bcd2ToByte>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002716:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fbf3 	bl	8002f08 <RTC_Bcd2ToByte>
 8002722:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002724:	4423      	add	r3, r4
 8002726:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb18 	bl	8002d60 <RTC_WriteTimeCounter>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2204      	movs	r2, #4
 800273a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e02f      	b.n	80027a6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0205 	bic.w	r2, r2, #5
 8002754:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fb29 	bl	8002dae <RTC_ReadAlarmCounter>
 800275c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d018      	beq.n	8002798 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	429a      	cmp	r2, r3
 800276c:	d214      	bcs.n	8002798 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002774:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002778:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800277a:	6939      	ldr	r1, [r7, #16]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fb2f 	bl	8002de0 <RTC_WriteAlarmCounter>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2204      	movs	r2, #4
 800278c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e006      	b.n	80027a6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
  }
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd90      	pop	{r4, r7, pc}
	...

080027b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RTC_GetTime+0x28>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b5      	b.n	8002948 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e0ac      	b.n	8002948 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fa86 	bl	8002d00 <RTC_ReadTimeCounter>
 80027f4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4a55      	ldr	r2, [pc, #340]	; (8002950 <HAL_RTC_GetTime+0x1a0>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0adb      	lsrs	r3, r3, #11
 8002800:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4b52      	ldr	r3, [pc, #328]	; (8002950 <HAL_RTC_GetTime+0x1a0>)
 8002806:	fba3 1302 	umull	r1, r3, r3, r2
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	4a4f      	ldr	r2, [pc, #316]	; (8002954 <HAL_RTC_GetTime+0x1a4>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4a4a      	ldr	r2, [pc, #296]	; (8002950 <HAL_RTC_GetTime+0x1a0>)
 8002828:	fba2 1203 	umull	r1, r2, r2, r3
 800282c:	0ad2      	lsrs	r2, r2, #11
 800282e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002832:	fb01 f202 	mul.w	r2, r1, r2
 8002836:	1a9a      	subs	r2, r3, r2
 8002838:	4b46      	ldr	r3, [pc, #280]	; (8002954 <HAL_RTC_GetTime+0x1a4>)
 800283a:	fba3 1302 	umull	r1, r3, r3, r2
 800283e:	0959      	lsrs	r1, r3, #5
 8002840:	460b      	mov	r3, r1
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	1ad1      	subs	r1, r2, r3
 800284a:	b2ca      	uxtb	r2, r1
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b17      	cmp	r3, #23
 8002854:	d955      	bls.n	8002902 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <HAL_RTC_GetTime+0x1a8>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002862:	6939      	ldr	r1, [r7, #16]
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <HAL_RTC_GetTime+0x1a8>)
 8002866:	fba3 2301 	umull	r2, r3, r3, r1
 800286a:	091a      	lsrs	r2, r3, #4
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	1aca      	subs	r2, r1, r3
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa96 	bl	8002dae <RTC_ReadAlarmCounter>
 8002882:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d008      	beq.n	800289e <HAL_RTC_GetTime+0xee>
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	429a      	cmp	r2, r3
 8002892:	d904      	bls.n	800289e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e002      	b.n	80028a4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_RTC_GetTime+0x1ac>)
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa53 	bl	8002d60 <RTC_WriteTimeCounter>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e041      	b.n	8002948 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d00c      	beq.n	80028e6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028d4:	69f9      	ldr	r1, [r7, #28]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa82 	bl	8002de0 <RTC_WriteAlarmCounter>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e030      	b.n	8002948 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80028e6:	69f9      	ldr	r1, [r7, #28]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa79 	bl	8002de0 <RTC_WriteAlarmCounter>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e027      	b.n	8002948 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80028f8:	6979      	ldr	r1, [r7, #20]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fb21 	bl	8002f42 <RTC_DateUpdate>
 8002900:	e003      	b.n	800290a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01a      	beq.n	8002946 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fada 	bl	8002ece <RTC_ByteToBcd2>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fad1 	bl	8002ece <RTC_ByteToBcd2>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	789b      	ldrb	r3, [r3, #2]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fac8 	bl	8002ece <RTC_ByteToBcd2>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	91a2b3c5 	.word	0x91a2b3c5
 8002954:	88888889 	.word	0x88888889
 8002958:	aaaaaaab 	.word	0xaaaaaaab
 800295c:	00015180 	.word	0x00015180

08002960 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_RTC_SetDate+0x24>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e097      	b.n	8002ab8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7c1b      	ldrb	r3, [r3, #16]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_RTC_SetDate+0x34>
 8002990:	2302      	movs	r3, #2
 8002992:	e091      	b.n	8002ab8 <HAL_RTC_SetDate+0x158>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	78da      	ldrb	r2, [r3, #3]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	785a      	ldrb	r2, [r3, #1]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	789a      	ldrb	r2, [r3, #2]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	739a      	strb	r2, [r3, #14]
 80029be:	e01a      	b.n	80029f6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	78db      	ldrb	r3, [r3, #3]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fa9f 	bl	8002f08 <RTC_Bcd2ToByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fa96 	bl	8002f08 <RTC_Bcd2ToByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	789b      	ldrb	r3, [r3, #2]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fa8d 	bl	8002f08 <RTC_Bcd2ToByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	7bdb      	ldrb	r3, [r3, #15]
 80029fa:	4618      	mov	r0, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7b59      	ldrb	r1, [r3, #13]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	7b9b      	ldrb	r3, [r3, #14]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f000 fb77 	bl	80030f8 <RTC_WeekDayNum>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	7b1a      	ldrb	r2, [r3, #12]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f970 	bl	8002d00 <RTC_ReadTimeCounter>
 8002a20:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <HAL_RTC_SetDate+0x160>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0adb      	lsrs	r3, r3, #11
 8002a2c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b18      	cmp	r3, #24
 8002a32:	d93a      	bls.n	8002aaa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_RTC_SetDate+0x164>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_RTC_SetDate+0x168>)
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f987 	bl	8002d60 <RTC_WriteTimeCounter>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e027      	b.n	8002ab8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f9a0 	bl	8002dae <RTC_ReadAlarmCounter>
 8002a6e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a76:	d018      	beq.n	8002aaa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d214      	bcs.n	8002aaa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a8a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f9a6 	bl	8002de0 <RTC_WriteAlarmCounter>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e006      	b.n	8002ab8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	91a2b3c5 	.word	0x91a2b3c5
 8002ac4:	aaaaaaab 	.word	0xaaaaaaab
 8002ac8:	00015180 	.word	0x00015180

08002acc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2100      	movs	r1, #0
 8002ade:	460a      	mov	r2, r1
 8002ae0:	801a      	strh	r2, [r3, #0]
 8002ae2:	460a      	mov	r2, r1
 8002ae4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_RTC_GetDate+0x26>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e03a      	b.n	8002b6c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002af6:	f107 0314 	add.w	r3, r7, #20
 8002afa:	2200      	movs	r2, #0
 8002afc:	4619      	mov	r1, r3
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff fe56 	bl	80027b0 <HAL_RTC_GetTime>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02e      	b.n	8002b6c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	7b1a      	ldrb	r2, [r3, #12]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	7bda      	ldrb	r2, [r3, #15]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	7b5a      	ldrb	r2, [r3, #13]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	7b9a      	ldrb	r2, [r3, #14]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01a      	beq.n	8002b6a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	78db      	ldrb	r3, [r3, #3]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f9c8 	bl	8002ece <RTC_ByteToBcd2>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f9bf 	bl	8002ece <RTC_ByteToBcd2>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	789b      	ldrb	r3, [r3, #2]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f9b6 	bl	8002ece <RTC_ByteToBcd2>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2100      	movs	r1, #0
 8002b8a:	460a      	mov	r2, r1
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	460a      	mov	r2, r1
 8002b90:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_RTC_SetAlarm+0x2a>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e07d      	b.n	8002c9e <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	7c1b      	ldrb	r3, [r3, #16]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_RTC_SetAlarm+0x3a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e077      	b.n	8002c9e <HAL_RTC_SetAlarm+0x12a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff fdf4 	bl	80027b0 <HAL_RTC_GetTime>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e065      	b.n	8002c9e <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bd2:	7d3b      	ldrb	r3, [r7, #20]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8002bde:	7d7b      	ldrb	r3, [r7, #21]
 8002be0:	4619      	mov	r1, r3
 8002be2:	460b      	mov	r3, r1
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a5b      	subs	r3, r3, r1
 8002be8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bea:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8002bec:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8002bee:	4413      	add	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d113      	bne.n	8002c20 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c02:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a5b      	subs	r3, r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c14:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8002c1a:	4413      	add	r3, r2
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e01e      	b.n	8002c5e <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f96f 	bl	8002f08 <RTC_Bcd2ToByte>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c32:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	785b      	ldrb	r3, [r3, #1]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f964 	bl	8002f08 <RTC_Bcd2ToByte>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c4c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f958 	bl	8002f08 <RTC_Bcd2ToByte>
 8002c58:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8002c5a:	4423      	add	r3, r4
 8002c5c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d205      	bcs.n	8002c72 <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002c6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c70:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c72:	69f9      	ldr	r1, [r7, #28]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8b3 	bl	8002de0 <RTC_WriteAlarmCounter>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2204      	movs	r2, #4
 8002c84:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e006      	b.n	8002c9e <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}

08002ca6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e01d      	b.n	8002cf8 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0208 	bic.w	r2, r2, #8
 8002cca:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ccc:	f7fe fbd8 	bl	8001480 <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002cd4:	f7fe fbd4 	bl	8001480 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e007      	b.n	8002cf8 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ee      	beq.n	8002cd4 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	827b      	strh	r3, [r7, #18]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	823b      	strh	r3, [r7, #16]
 8002d10:	2300      	movs	r3, #0
 8002d12:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002d30:	8a7a      	ldrh	r2, [r7, #18]
 8002d32:	8a3b      	ldrh	r3, [r7, #16]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d008      	beq.n	8002d4a <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002d38:	8a3b      	ldrh	r3, [r7, #16]
 8002d3a:	041a      	lsls	r2, r3, #16
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e004      	b.n	8002d54 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002d4a:	8a7b      	ldrh	r3, [r7, #18]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002d54:	697b      	ldr	r3, [r7, #20]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f85d 	bl	8002e2e <RTC_EnterInitMode>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	e011      	b.n	8002da4 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	0c12      	lsrs	r2, r2, #16
 8002d88:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	b292      	uxth	r2, r2
 8002d92:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f872 	bl	8002e7e <RTC_ExitInitMode>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	81fb      	strh	r3, [r7, #14]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	89bb      	ldrh	r3, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f81d 	bl	8002e2e <RTC_EnterInitMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e011      	b.n	8002e24 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	0c12      	lsrs	r2, r2, #16
 8002e08:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	b292      	uxth	r2, r2
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f832 	bl	8002e7e <RTC_ExitInitMode>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002e3a:	f7fe fb21 	bl	8001480 <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e40:	e009      	b.n	8002e56 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e42:	f7fe fb1d 	bl	8001480 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e50:	d901      	bls.n	8002e56 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ee      	beq.n	8002e42 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0210 	orr.w	r2, r2, #16
 8002e72:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002e9a:	f7fe faf1 	bl	8001480 <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ea0:	e009      	b.n	8002eb6 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002ea2:	f7fe faed 	bl	8001480 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb0:	d901      	bls.n	8002eb6 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e007      	b.n	8002ec6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002edc:	e005      	b.n	8002eea <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	3b0a      	subs	r3, #10
 8002ee8:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d8f6      	bhi.n	8002ede <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	b2db      	uxtb	r3, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7bdb      	ldrb	r3, [r3, #15]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7b5b      	ldrb	r3, [r3, #13]
 8002f66:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7b9b      	ldrb	r3, [r3, #14]
 8002f6c:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	e06f      	b.n	8003054 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d011      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d00e      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d00b      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	d008      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d005      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b0a      	cmp	r3, #10
 8002f96:	d002      	beq.n	8002f9e <RTC_DateUpdate+0x5c>
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d117      	bne.n	8002fce <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b1e      	cmp	r3, #30
 8002fa2:	d803      	bhi.n	8002fac <RTC_DateUpdate+0x6a>
      {
        day++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002faa:	e050      	b.n	800304e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d005      	beq.n	8002fbe <RTC_DateUpdate+0x7c>
        {
          month++;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002fbc:	e047      	b.n	800304e <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
          year++;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002fcc:	e03f      	b.n	800304e <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d008      	beq.n	8002fe6 <RTC_DateUpdate+0xa4>
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d005      	beq.n	8002fe6 <RTC_DateUpdate+0xa4>
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d002      	beq.n	8002fe6 <RTC_DateUpdate+0xa4>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b0b      	cmp	r3, #11
 8002fe4:	d10c      	bne.n	8003000 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b1d      	cmp	r3, #29
 8002fea:	d803      	bhi.n	8002ff4 <RTC_DateUpdate+0xb2>
      {
        day++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ff2:	e02c      	b.n	800304e <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002ffe:	e026      	b.n	800304e <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d123      	bne.n	800304e <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b1b      	cmp	r3, #27
 800300a:	d803      	bhi.n	8003014 <RTC_DateUpdate+0xd2>
      {
        day++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e01c      	b.n	800304e <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b1c      	cmp	r3, #28
 8003018:	d111      	bne.n	800303e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f838 	bl	8003094 <RTC_IsLeapYear>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <RTC_DateUpdate+0xf0>
        {
          day++;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e00d      	b.n	800304e <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3301      	adds	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003038:	2301      	movs	r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e007      	b.n	800304e <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b1d      	cmp	r3, #29
 8003042:	d104      	bne.n	800304e <RTC_DateUpdate+0x10c>
      {
        month++;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3301      	adds	r3, #1
 8003048:	613b      	str	r3, [r7, #16]
        day = 1U;
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3301      	adds	r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d38b      	bcc.n	8002f74 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	4619      	mov	r1, r3
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f000 f83a 	bl	80030f8 <RTC_WeekDayNum>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	731a      	strb	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e01d      	b.n	80030ea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <RTC_IsLeapYear+0x60>)
 80030b2:	fba2 1203 	umull	r1, r2, r2, r3
 80030b6:	0952      	lsrs	r2, r2, #5
 80030b8:	2164      	movs	r1, #100	; 0x64
 80030ba:	fb01 f202 	mul.w	r2, r1, r2
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <RTC_IsLeapYear+0x60>)
 80030ce:	fba2 1203 	umull	r1, r2, r2, r3
 80030d2:	09d2      	lsrs	r2, r2, #7
 80030d4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80030d8:	fb01 f202 	mul.w	r2, r1, r2
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80030e8:	2300      	movs	r3, #0
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	51eb851f 	.word	0x51eb851f

080030f8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	70fb      	strb	r3, [r7, #3]
 8003104:	4613      	mov	r3, r2
 8003106:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003116:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d82d      	bhi.n	800317a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <RTC_WeekDayNum+0xe4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	085a      	lsrs	r2, r3, #1
 8003132:	78bb      	ldrb	r3, [r7, #2]
 8003134:	441a      	add	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	441a      	add	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3b01      	subs	r3, #1
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3b01      	subs	r3, #1
 8003146:	4926      	ldr	r1, [pc, #152]	; (80031e0 <RTC_WeekDayNum+0xe8>)
 8003148:	fba1 1303 	umull	r1, r3, r1, r3
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3b01      	subs	r3, #1
 8003154:	4922      	ldr	r1, [pc, #136]	; (80031e0 <RTC_WeekDayNum+0xe8>)
 8003156:	fba1 1303 	umull	r1, r3, r1, r3
 800315a:	09db      	lsrs	r3, r3, #7
 800315c:	4413      	add	r3, r2
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <RTC_WeekDayNum+0xec>)
 8003162:	fba3 1302 	umull	r1, r3, r3, r2
 8003166:	1ad1      	subs	r1, r2, r3
 8003168:	0849      	lsrs	r1, r1, #1
 800316a:	440b      	add	r3, r1
 800316c:	0899      	lsrs	r1, r3, #2
 800316e:	460b      	mov	r3, r1
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a5b      	subs	r3, r3, r1
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e029      	b.n	80031ce <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <RTC_WeekDayNum+0xe4>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	085a      	lsrs	r2, r3, #1
 800318e:	78bb      	ldrb	r3, [r7, #2]
 8003190:	441a      	add	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	441a      	add	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4910      	ldr	r1, [pc, #64]	; (80031e0 <RTC_WeekDayNum+0xe8>)
 80031a0:	fba1 1303 	umull	r1, r3, r1, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <RTC_WeekDayNum+0xe8>)
 80031ac:	fba1 1303 	umull	r1, r3, r1, r3
 80031b0:	09db      	lsrs	r3, r3, #7
 80031b2:	4413      	add	r3, r2
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <RTC_WeekDayNum+0xec>)
 80031b8:	fba3 1302 	umull	r1, r3, r3, r2
 80031bc:	1ad1      	subs	r1, r2, r3
 80031be:	0849      	lsrs	r1, r1, #1
 80031c0:	440b      	add	r3, r1
 80031c2:	0899      	lsrs	r1, r3, #2
 80031c4:	460b      	mov	r3, r1
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a5b      	subs	r3, r3, r1
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	b2db      	uxtb	r3, r3
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	38e38e39 	.word	0x38e38e39
 80031e0:	51eb851f 	.word	0x51eb851f
 80031e4:	24924925 	.word	0x24924925

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e041      	b.n	800327e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fef8 	bl	8001004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fa6e 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e035      	b.n	800330c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_TIM_Base_Start_IT+0x90>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x4e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x4e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_TIM_Base_Start_IT+0x94>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d111      	bne.n	80032fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d010      	beq.n	800330a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	e007      	b.n	800330a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9b4 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9a7 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9b6 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f98a 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f97d 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f98c 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f960 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f953 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f962 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f936 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f929 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f938 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fb5a 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa6b 	bl	80039a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8fc 	bl	80036f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0220 	mvn.w	r2, #32
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa36 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b4      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d03e      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0xd4>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	f200 8087 	bhi.w	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f000 8086 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x172>
 8003596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359a:	d87f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d01a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xa6>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d87b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d050      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x11a>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d877      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d03c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xfa>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d873      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d058      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x13a>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d86f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d064      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d86b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d060      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d867      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d05a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	e062      	b.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	f000 f95e 	bl	80038a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	609a      	str	r2, [r3, #8]
      break;
 8003602:	e04f      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	f000 f947 	bl	80038a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e03c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f8be 	bl	80037b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2150      	movs	r1, #80	; 0x50
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f915 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003648:	e02c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003656:	461a      	mov	r2, r3
 8003658:	f000 f8dc 	bl	8003814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f905 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003668:	e01c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	461a      	mov	r2, r3
 8003678:	f000 f89e 	bl	80037b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f8f5 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 f8ec 	bl	8003872 <TIM_ITRx_SetConfig>
      break;
 800369a:	e003      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <TIM_Base_SetConfig+0xa8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x28>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x28>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <TIM_Base_SetConfig+0xac>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <TIM_Base_SetConfig+0xa8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d007      	beq.n	800375a <TIM_Base_SetConfig+0x52>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d003      	beq.n	800375a <TIM_Base_SetConfig+0x52>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <TIM_Base_SetConfig+0xac>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <TIM_Base_SetConfig+0xa8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d103      	bne.n	80037a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	615a      	str	r2, [r3, #20]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400

080037b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f023 0201 	bic.w	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 030a 	bic.w	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0210 	bic.w	r2, r3, #16
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	031b      	lsls	r3, r3, #12
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 0307 	orr.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	021a      	lsls	r2, r3, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	609a      	str	r2, [r3, #8]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e041      	b.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d009      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d004      	beq.n	8003954 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10c      	bne.n	800396e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <siprintf>:
 80039b8:	b40e      	push	{r1, r2, r3}
 80039ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039be:	b500      	push	{lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	ab1d      	add	r3, sp, #116	; 0x74
 80039c4:	9002      	str	r0, [sp, #8]
 80039c6:	9006      	str	r0, [sp, #24]
 80039c8:	9107      	str	r1, [sp, #28]
 80039ca:	9104      	str	r1, [sp, #16]
 80039cc:	4808      	ldr	r0, [pc, #32]	; (80039f0 <siprintf+0x38>)
 80039ce:	4909      	ldr	r1, [pc, #36]	; (80039f4 <siprintf+0x3c>)
 80039d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039d4:	9105      	str	r1, [sp, #20]
 80039d6:	6800      	ldr	r0, [r0, #0]
 80039d8:	a902      	add	r1, sp, #8
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	f000 f98e 	bl	8003cfc <_svfiprintf_r>
 80039e0:	2200      	movs	r2, #0
 80039e2:	9b02      	ldr	r3, [sp, #8]
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	b01c      	add	sp, #112	; 0x70
 80039e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039ec:	b003      	add	sp, #12
 80039ee:	4770      	bx	lr
 80039f0:	20000058 	.word	0x20000058
 80039f4:	ffff0208 	.word	0xffff0208

080039f8 <memset>:
 80039f8:	4603      	mov	r3, r0
 80039fa:	4402      	add	r2, r0
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d100      	bne.n	8003a02 <memset+0xa>
 8003a00:	4770      	bx	lr
 8003a02:	f803 1b01 	strb.w	r1, [r3], #1
 8003a06:	e7f9      	b.n	80039fc <memset+0x4>

08003a08 <__errno>:
 8003a08:	4b01      	ldr	r3, [pc, #4]	; (8003a10 <__errno+0x8>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000058 	.word	0x20000058

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	2600      	movs	r6, #0
 8003a18:	4d0c      	ldr	r5, [pc, #48]	; (8003a4c <__libc_init_array+0x38>)
 8003a1a:	4c0d      	ldr	r4, [pc, #52]	; (8003a50 <__libc_init_array+0x3c>)
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	f000 fc7a 	bl	800431c <_init>
 8003a28:	2600      	movs	r6, #0
 8003a2a:	4d0a      	ldr	r5, [pc, #40]	; (8003a54 <__libc_init_array+0x40>)
 8003a2c:	4c0a      	ldr	r4, [pc, #40]	; (8003a58 <__libc_init_array+0x44>)
 8003a2e:	1b64      	subs	r4, r4, r5
 8003a30:	10a4      	asrs	r4, r4, #2
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	08004454 	.word	0x08004454
 8003a50:	08004454 	.word	0x08004454
 8003a54:	08004454 	.word	0x08004454
 8003a58:	08004458 	.word	0x08004458

08003a5c <__retarget_lock_acquire_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_release_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d040      	beq.n	8003aea <_free_r+0x8a>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 f8dc 	bl	8003c30 <__malloc_lock>
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <_free_r+0x8c>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	b933      	cbnz	r3, 8003a8c <_free_r+0x2c>
 8003a7e:	6063      	str	r3, [r4, #4]
 8003a80:	6014      	str	r4, [r2, #0]
 8003a82:	4628      	mov	r0, r5
 8003a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a88:	f000 b8d8 	b.w	8003c3c <__malloc_unlock>
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d908      	bls.n	8003aa2 <_free_r+0x42>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	bf01      	itttt	eq
 8003a98:	6819      	ldreq	r1, [r3, #0]
 8003a9a:	685b      	ldreq	r3, [r3, #4]
 8003a9c:	1809      	addeq	r1, r1, r0
 8003a9e:	6021      	streq	r1, [r4, #0]
 8003aa0:	e7ed      	b.n	8003a7e <_free_r+0x1e>
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b10b      	cbz	r3, 8003aac <_free_r+0x4c>
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x42>
 8003aac:	6811      	ldr	r1, [r2, #0]
 8003aae:	1850      	adds	r0, r2, r1
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x6c>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	4401      	add	r1, r0
 8003ab8:	1850      	adds	r0, r2, r1
 8003aba:	4283      	cmp	r3, r0
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	d1e0      	bne.n	8003a82 <_free_r+0x22>
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4408      	add	r0, r1
 8003ac6:	6010      	str	r0, [r2, #0]
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	e7da      	b.n	8003a82 <_free_r+0x22>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x74>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	e7d6      	b.n	8003a82 <_free_r+0x22>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	1821      	adds	r1, r4, r0
 8003ad8:	428b      	cmp	r3, r1
 8003ada:	bf01      	itttt	eq
 8003adc:	6819      	ldreq	r1, [r3, #0]
 8003ade:	685b      	ldreq	r3, [r3, #4]
 8003ae0:	1809      	addeq	r1, r1, r0
 8003ae2:	6021      	streq	r1, [r4, #0]
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	6054      	str	r4, [r2, #4]
 8003ae8:	e7cb      	b.n	8003a82 <_free_r+0x22>
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	20000328 	.word	0x20000328

08003af0 <sbrk_aligned>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	4e0e      	ldr	r6, [pc, #56]	; (8003b2c <sbrk_aligned+0x3c>)
 8003af4:	460c      	mov	r4, r1
 8003af6:	6831      	ldr	r1, [r6, #0]
 8003af8:	4605      	mov	r5, r0
 8003afa:	b911      	cbnz	r1, 8003b02 <sbrk_aligned+0x12>
 8003afc:	f000 fbaa 	bl	8004254 <_sbrk_r>
 8003b00:	6030      	str	r0, [r6, #0]
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 fba5 	bl	8004254 <_sbrk_r>
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	d00a      	beq.n	8003b24 <sbrk_aligned+0x34>
 8003b0e:	1cc4      	adds	r4, r0, #3
 8003b10:	f024 0403 	bic.w	r4, r4, #3
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d007      	beq.n	8003b28 <sbrk_aligned+0x38>
 8003b18:	1a21      	subs	r1, r4, r0
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 fb9a 	bl	8004254 <_sbrk_r>
 8003b20:	3001      	adds	r0, #1
 8003b22:	d101      	bne.n	8003b28 <sbrk_aligned+0x38>
 8003b24:	f04f 34ff 	mov.w	r4, #4294967295
 8003b28:	4620      	mov	r0, r4
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	2000032c 	.word	0x2000032c

08003b30 <_malloc_r>:
 8003b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b34:	1ccd      	adds	r5, r1, #3
 8003b36:	f025 0503 	bic.w	r5, r5, #3
 8003b3a:	3508      	adds	r5, #8
 8003b3c:	2d0c      	cmp	r5, #12
 8003b3e:	bf38      	it	cc
 8003b40:	250c      	movcc	r5, #12
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	4607      	mov	r7, r0
 8003b46:	db01      	blt.n	8003b4c <_malloc_r+0x1c>
 8003b48:	42a9      	cmp	r1, r5
 8003b4a:	d905      	bls.n	8003b58 <_malloc_r+0x28>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	2600      	movs	r6, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4630      	mov	r0, r6
 8003b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c2c <_malloc_r+0xfc>
 8003b5c:	f000 f868 	bl	8003c30 <__malloc_lock>
 8003b60:	f8d8 3000 	ldr.w	r3, [r8]
 8003b64:	461c      	mov	r4, r3
 8003b66:	bb5c      	cbnz	r4, 8003bc0 <_malloc_r+0x90>
 8003b68:	4629      	mov	r1, r5
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f7ff ffc0 	bl	8003af0 <sbrk_aligned>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	4604      	mov	r4, r0
 8003b74:	d155      	bne.n	8003c22 <_malloc_r+0xf2>
 8003b76:	f8d8 4000 	ldr.w	r4, [r8]
 8003b7a:	4626      	mov	r6, r4
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	d145      	bne.n	8003c0c <_malloc_r+0xdc>
 8003b80:	2c00      	cmp	r4, #0
 8003b82:	d048      	beq.n	8003c16 <_malloc_r+0xe6>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	4631      	mov	r1, r6
 8003b88:	4638      	mov	r0, r7
 8003b8a:	eb04 0903 	add.w	r9, r4, r3
 8003b8e:	f000 fb61 	bl	8004254 <_sbrk_r>
 8003b92:	4581      	cmp	r9, r0
 8003b94:	d13f      	bne.n	8003c16 <_malloc_r+0xe6>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	4638      	mov	r0, r7
 8003b9a:	1a6d      	subs	r5, r5, r1
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7ff ffa7 	bl	8003af0 <sbrk_aligned>
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	d037      	beq.n	8003c16 <_malloc_r+0xe6>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	442b      	add	r3, r5
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d038      	beq.n	8003c26 <_malloc_r+0xf6>
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	42a2      	cmp	r2, r4
 8003bb8:	d12b      	bne.n	8003c12 <_malloc_r+0xe2>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	e00f      	b.n	8003be0 <_malloc_r+0xb0>
 8003bc0:	6822      	ldr	r2, [r4, #0]
 8003bc2:	1b52      	subs	r2, r2, r5
 8003bc4:	d41f      	bmi.n	8003c06 <_malloc_r+0xd6>
 8003bc6:	2a0b      	cmp	r2, #11
 8003bc8:	d917      	bls.n	8003bfa <_malloc_r+0xca>
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	6025      	str	r5, [r4, #0]
 8003bd0:	bf18      	it	ne
 8003bd2:	6059      	strne	r1, [r3, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	bf08      	it	eq
 8003bd8:	f8c8 1000 	streq.w	r1, [r8]
 8003bdc:	5162      	str	r2, [r4, r5]
 8003bde:	604b      	str	r3, [r1, #4]
 8003be0:	4638      	mov	r0, r7
 8003be2:	f104 060b 	add.w	r6, r4, #11
 8003be6:	f000 f829 	bl	8003c3c <__malloc_unlock>
 8003bea:	f026 0607 	bic.w	r6, r6, #7
 8003bee:	1d23      	adds	r3, r4, #4
 8003bf0:	1af2      	subs	r2, r6, r3
 8003bf2:	d0ae      	beq.n	8003b52 <_malloc_r+0x22>
 8003bf4:	1b9b      	subs	r3, r3, r6
 8003bf6:	50a3      	str	r3, [r4, r2]
 8003bf8:	e7ab      	b.n	8003b52 <_malloc_r+0x22>
 8003bfa:	42a3      	cmp	r3, r4
 8003bfc:	6862      	ldr	r2, [r4, #4]
 8003bfe:	d1dd      	bne.n	8003bbc <_malloc_r+0x8c>
 8003c00:	f8c8 2000 	str.w	r2, [r8]
 8003c04:	e7ec      	b.n	8003be0 <_malloc_r+0xb0>
 8003c06:	4623      	mov	r3, r4
 8003c08:	6864      	ldr	r4, [r4, #4]
 8003c0a:	e7ac      	b.n	8003b66 <_malloc_r+0x36>
 8003c0c:	4634      	mov	r4, r6
 8003c0e:	6876      	ldr	r6, [r6, #4]
 8003c10:	e7b4      	b.n	8003b7c <_malloc_r+0x4c>
 8003c12:	4613      	mov	r3, r2
 8003c14:	e7cc      	b.n	8003bb0 <_malloc_r+0x80>
 8003c16:	230c      	movs	r3, #12
 8003c18:	4638      	mov	r0, r7
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	f000 f80e 	bl	8003c3c <__malloc_unlock>
 8003c20:	e797      	b.n	8003b52 <_malloc_r+0x22>
 8003c22:	6025      	str	r5, [r4, #0]
 8003c24:	e7dc      	b.n	8003be0 <_malloc_r+0xb0>
 8003c26:	605b      	str	r3, [r3, #4]
 8003c28:	deff      	udf	#255	; 0xff
 8003c2a:	bf00      	nop
 8003c2c:	20000328 	.word	0x20000328

08003c30 <__malloc_lock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_lock+0x8>)
 8003c32:	f7ff bf13 	b.w	8003a5c <__retarget_lock_acquire_recursive>
 8003c36:	bf00      	nop
 8003c38:	20000324 	.word	0x20000324

08003c3c <__malloc_unlock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_unlock+0x8>)
 8003c3e:	f7ff bf0e 	b.w	8003a5e <__retarget_lock_release_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000324 	.word	0x20000324

08003c48 <__ssputs_r>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	461f      	mov	r7, r3
 8003c4e:	688e      	ldr	r6, [r1, #8]
 8003c50:	4682      	mov	sl, r0
 8003c52:	42be      	cmp	r6, r7
 8003c54:	460c      	mov	r4, r1
 8003c56:	4690      	mov	r8, r2
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	d82c      	bhi.n	8003cb6 <__ssputs_r+0x6e>
 8003c5c:	898a      	ldrh	r2, [r1, #12]
 8003c5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c62:	d026      	beq.n	8003cb2 <__ssputs_r+0x6a>
 8003c64:	6965      	ldr	r5, [r4, #20]
 8003c66:	6909      	ldr	r1, [r1, #16]
 8003c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c6c:	eba3 0901 	sub.w	r9, r3, r1
 8003c70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c74:	1c7b      	adds	r3, r7, #1
 8003c76:	444b      	add	r3, r9
 8003c78:	106d      	asrs	r5, r5, #1
 8003c7a:	429d      	cmp	r5, r3
 8003c7c:	bf38      	it	cc
 8003c7e:	461d      	movcc	r5, r3
 8003c80:	0553      	lsls	r3, r2, #21
 8003c82:	d527      	bpl.n	8003cd4 <__ssputs_r+0x8c>
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7ff ff53 	bl	8003b30 <_malloc_r>
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	b360      	cbz	r0, 8003ce8 <__ssputs_r+0xa0>
 8003c8e:	464a      	mov	r2, r9
 8003c90:	6921      	ldr	r1, [r4, #16]
 8003c92:	f000 fafd 	bl	8004290 <memcpy>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	6126      	str	r6, [r4, #16]
 8003ca4:	444e      	add	r6, r9
 8003ca6:	6026      	str	r6, [r4, #0]
 8003ca8:	463e      	mov	r6, r7
 8003caa:	6165      	str	r5, [r4, #20]
 8003cac:	eba5 0509 	sub.w	r5, r5, r9
 8003cb0:	60a5      	str	r5, [r4, #8]
 8003cb2:	42be      	cmp	r6, r7
 8003cb4:	d900      	bls.n	8003cb8 <__ssputs_r+0x70>
 8003cb6:	463e      	mov	r6, r7
 8003cb8:	4632      	mov	r2, r6
 8003cba:	4641      	mov	r1, r8
 8003cbc:	6820      	ldr	r0, [r4, #0]
 8003cbe:	f000 faaf 	bl	8004220 <memmove>
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	1b9b      	subs	r3, r3, r6
 8003cc8:	60a3      	str	r3, [r4, #8]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	4433      	add	r3, r6
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd4:	462a      	mov	r2, r5
 8003cd6:	f000 fae9 	bl	80042ac <_realloc_r>
 8003cda:	4606      	mov	r6, r0
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d1e0      	bne.n	8003ca2 <__ssputs_r+0x5a>
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	6921      	ldr	r1, [r4, #16]
 8003ce4:	f7ff febc 	bl	8003a60 <_free_r>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	f8ca 3000 	str.w	r3, [sl]
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	e7e9      	b.n	8003cd0 <__ssputs_r+0x88>

08003cfc <_svfiprintf_r>:
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	4698      	mov	r8, r3
 8003d02:	898b      	ldrh	r3, [r1, #12]
 8003d04:	4607      	mov	r7, r0
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	460d      	mov	r5, r1
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	b09d      	sub	sp, #116	; 0x74
 8003d0e:	d50e      	bpl.n	8003d2e <_svfiprintf_r+0x32>
 8003d10:	690b      	ldr	r3, [r1, #16]
 8003d12:	b963      	cbnz	r3, 8003d2e <_svfiprintf_r+0x32>
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	f7ff ff0b 	bl	8003b30 <_malloc_r>
 8003d1a:	6028      	str	r0, [r5, #0]
 8003d1c:	6128      	str	r0, [r5, #16]
 8003d1e:	b920      	cbnz	r0, 8003d2a <_svfiprintf_r+0x2e>
 8003d20:	230c      	movs	r3, #12
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	e0d0      	b.n	8003ecc <_svfiprintf_r+0x1d0>
 8003d2a:	2340      	movs	r3, #64	; 0x40
 8003d2c:	616b      	str	r3, [r5, #20]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9309      	str	r3, [sp, #36]	; 0x24
 8003d32:	2320      	movs	r3, #32
 8003d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d38:	2330      	movs	r3, #48	; 0x30
 8003d3a:	f04f 0901 	mov.w	r9, #1
 8003d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d42:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003ee4 <_svfiprintf_r+0x1e8>
 8003d46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	469a      	mov	sl, r3
 8003d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d52:	b10a      	cbz	r2, 8003d58 <_svfiprintf_r+0x5c>
 8003d54:	2a25      	cmp	r2, #37	; 0x25
 8003d56:	d1f9      	bne.n	8003d4c <_svfiprintf_r+0x50>
 8003d58:	ebba 0b04 	subs.w	fp, sl, r4
 8003d5c:	d00b      	beq.n	8003d76 <_svfiprintf_r+0x7a>
 8003d5e:	465b      	mov	r3, fp
 8003d60:	4622      	mov	r2, r4
 8003d62:	4629      	mov	r1, r5
 8003d64:	4638      	mov	r0, r7
 8003d66:	f7ff ff6f 	bl	8003c48 <__ssputs_r>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f000 80a9 	beq.w	8003ec2 <_svfiprintf_r+0x1c6>
 8003d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d72:	445a      	add	r2, fp
 8003d74:	9209      	str	r2, [sp, #36]	; 0x24
 8003d76:	f89a 3000 	ldrb.w	r3, [sl]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80a1 	beq.w	8003ec2 <_svfiprintf_r+0x1c6>
 8003d80:	2300      	movs	r3, #0
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d8a:	f10a 0a01 	add.w	sl, sl, #1
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	9307      	str	r3, [sp, #28]
 8003d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d96:	931a      	str	r3, [sp, #104]	; 0x68
 8003d98:	4654      	mov	r4, sl
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da0:	4850      	ldr	r0, [pc, #320]	; (8003ee4 <_svfiprintf_r+0x1e8>)
 8003da2:	f000 fa67 	bl	8004274 <memchr>
 8003da6:	9a04      	ldr	r2, [sp, #16]
 8003da8:	b9d8      	cbnz	r0, 8003de2 <_svfiprintf_r+0xe6>
 8003daa:	06d0      	lsls	r0, r2, #27
 8003dac:	bf44      	itt	mi
 8003dae:	2320      	movmi	r3, #32
 8003db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db4:	0711      	lsls	r1, r2, #28
 8003db6:	bf44      	itt	mi
 8003db8:	232b      	movmi	r3, #43	; 0x2b
 8003dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc4:	d015      	beq.n	8003df2 <_svfiprintf_r+0xf6>
 8003dc6:	4654      	mov	r4, sl
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f04f 0c0a 	mov.w	ip, #10
 8003dce:	9a07      	ldr	r2, [sp, #28]
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dd6:	3b30      	subs	r3, #48	; 0x30
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d94d      	bls.n	8003e78 <_svfiprintf_r+0x17c>
 8003ddc:	b1b0      	cbz	r0, 8003e0c <_svfiprintf_r+0x110>
 8003dde:	9207      	str	r2, [sp, #28]
 8003de0:	e014      	b.n	8003e0c <_svfiprintf_r+0x110>
 8003de2:	eba0 0308 	sub.w	r3, r0, r8
 8003de6:	fa09 f303 	lsl.w	r3, r9, r3
 8003dea:	4313      	orrs	r3, r2
 8003dec:	46a2      	mov	sl, r4
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	e7d2      	b.n	8003d98 <_svfiprintf_r+0x9c>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	1d19      	adds	r1, r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	9103      	str	r1, [sp, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bfbb      	ittet	lt
 8003dfe:	425b      	neglt	r3, r3
 8003e00:	f042 0202 	orrlt.w	r2, r2, #2
 8003e04:	9307      	strge	r3, [sp, #28]
 8003e06:	9307      	strlt	r3, [sp, #28]
 8003e08:	bfb8      	it	lt
 8003e0a:	9204      	strlt	r2, [sp, #16]
 8003e0c:	7823      	ldrb	r3, [r4, #0]
 8003e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e10:	d10c      	bne.n	8003e2c <_svfiprintf_r+0x130>
 8003e12:	7863      	ldrb	r3, [r4, #1]
 8003e14:	2b2a      	cmp	r3, #42	; 0x2a
 8003e16:	d134      	bne.n	8003e82 <_svfiprintf_r+0x186>
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	3402      	adds	r4, #2
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	9203      	str	r2, [sp, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfb8      	it	lt
 8003e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ee8 <_svfiprintf_r+0x1ec>
 8003e30:	2203      	movs	r2, #3
 8003e32:	4650      	mov	r0, sl
 8003e34:	7821      	ldrb	r1, [r4, #0]
 8003e36:	f000 fa1d 	bl	8004274 <memchr>
 8003e3a:	b138      	cbz	r0, 8003e4c <_svfiprintf_r+0x150>
 8003e3c:	2240      	movs	r2, #64	; 0x40
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	eba0 000a 	sub.w	r0, r0, sl
 8003e44:	4082      	lsls	r2, r0
 8003e46:	4313      	orrs	r3, r2
 8003e48:	3401      	adds	r4, #1
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e50:	2206      	movs	r2, #6
 8003e52:	4826      	ldr	r0, [pc, #152]	; (8003eec <_svfiprintf_r+0x1f0>)
 8003e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e58:	f000 fa0c 	bl	8004274 <memchr>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d038      	beq.n	8003ed2 <_svfiprintf_r+0x1d6>
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <_svfiprintf_r+0x1f4>)
 8003e62:	bb1b      	cbnz	r3, 8003eac <_svfiprintf_r+0x1b0>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	3307      	adds	r3, #7
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e72:	4433      	add	r3, r6
 8003e74:	9309      	str	r3, [sp, #36]	; 0x24
 8003e76:	e768      	b.n	8003d4a <_svfiprintf_r+0x4e>
 8003e78:	460c      	mov	r4, r1
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e80:	e7a6      	b.n	8003dd0 <_svfiprintf_r+0xd4>
 8003e82:	2300      	movs	r3, #0
 8003e84:	f04f 0c0a 	mov.w	ip, #10
 8003e88:	4619      	mov	r1, r3
 8003e8a:	3401      	adds	r4, #1
 8003e8c:	9305      	str	r3, [sp, #20]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e94:	3a30      	subs	r2, #48	; 0x30
 8003e96:	2a09      	cmp	r2, #9
 8003e98:	d903      	bls.n	8003ea2 <_svfiprintf_r+0x1a6>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0c6      	beq.n	8003e2c <_svfiprintf_r+0x130>
 8003e9e:	9105      	str	r1, [sp, #20]
 8003ea0:	e7c4      	b.n	8003e2c <_svfiprintf_r+0x130>
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003eaa:	e7f0      	b.n	8003e8e <_svfiprintf_r+0x192>
 8003eac:	ab03      	add	r3, sp, #12
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4638      	mov	r0, r7
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <_svfiprintf_r+0x1f8>)
 8003eb6:	a904      	add	r1, sp, #16
 8003eb8:	f3af 8000 	nop.w
 8003ebc:	1c42      	adds	r2, r0, #1
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	d1d6      	bne.n	8003e70 <_svfiprintf_r+0x174>
 8003ec2:	89ab      	ldrh	r3, [r5, #12]
 8003ec4:	065b      	lsls	r3, r3, #25
 8003ec6:	f53f af2d 	bmi.w	8003d24 <_svfiprintf_r+0x28>
 8003eca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ecc:	b01d      	add	sp, #116	; 0x74
 8003ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed2:	ab03      	add	r3, sp, #12
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	462a      	mov	r2, r5
 8003ed8:	4638      	mov	r0, r7
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <_svfiprintf_r+0x1f8>)
 8003edc:	a904      	add	r1, sp, #16
 8003ede:	f000 f87d 	bl	8003fdc <_printf_i>
 8003ee2:	e7eb      	b.n	8003ebc <_svfiprintf_r+0x1c0>
 8003ee4:	0800441e 	.word	0x0800441e
 8003ee8:	08004424 	.word	0x08004424
 8003eec:	08004428 	.word	0x08004428
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	08003c49 	.word	0x08003c49

08003ef8 <_printf_common>:
 8003ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003efc:	4616      	mov	r6, r2
 8003efe:	4699      	mov	r9, r3
 8003f00:	688a      	ldr	r2, [r1, #8]
 8003f02:	690b      	ldr	r3, [r1, #16]
 8003f04:	4607      	mov	r7, r0
 8003f06:	4293      	cmp	r3, r2
 8003f08:	bfb8      	it	lt
 8003f0a:	4613      	movlt	r3, r2
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f12:	460c      	mov	r4, r1
 8003f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f18:	b10a      	cbz	r2, 8003f1e <_printf_common+0x26>
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	0699      	lsls	r1, r3, #26
 8003f22:	bf42      	ittt	mi
 8003f24:	6833      	ldrmi	r3, [r6, #0]
 8003f26:	3302      	addmi	r3, #2
 8003f28:	6033      	strmi	r3, [r6, #0]
 8003f2a:	6825      	ldr	r5, [r4, #0]
 8003f2c:	f015 0506 	ands.w	r5, r5, #6
 8003f30:	d106      	bne.n	8003f40 <_printf_common+0x48>
 8003f32:	f104 0a19 	add.w	sl, r4, #25
 8003f36:	68e3      	ldr	r3, [r4, #12]
 8003f38:	6832      	ldr	r2, [r6, #0]
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	dc2b      	bgt.n	8003f98 <_printf_common+0xa0>
 8003f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f44:	1e13      	subs	r3, r2, #0
 8003f46:	6822      	ldr	r2, [r4, #0]
 8003f48:	bf18      	it	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	0692      	lsls	r2, r2, #26
 8003f4e:	d430      	bmi.n	8003fb2 <_printf_common+0xba>
 8003f50:	4649      	mov	r1, r9
 8003f52:	4638      	mov	r0, r7
 8003f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d023      	beq.n	8003fa6 <_printf_common+0xae>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	6922      	ldr	r2, [r4, #16]
 8003f62:	f003 0306 	and.w	r3, r3, #6
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	bf14      	ite	ne
 8003f6a:	2500      	movne	r5, #0
 8003f6c:	6833      	ldreq	r3, [r6, #0]
 8003f6e:	f04f 0600 	mov.w	r6, #0
 8003f72:	bf08      	it	eq
 8003f74:	68e5      	ldreq	r5, [r4, #12]
 8003f76:	f104 041a 	add.w	r4, r4, #26
 8003f7a:	bf08      	it	eq
 8003f7c:	1aed      	subeq	r5, r5, r3
 8003f7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f82:	bf08      	it	eq
 8003f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bfc4      	itt	gt
 8003f8c:	1a9b      	subgt	r3, r3, r2
 8003f8e:	18ed      	addgt	r5, r5, r3
 8003f90:	42b5      	cmp	r5, r6
 8003f92:	d11a      	bne.n	8003fca <_printf_common+0xd2>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e008      	b.n	8003faa <_printf_common+0xb2>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4652      	mov	r2, sl
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d103      	bne.n	8003fae <_printf_common+0xb6>
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fae:	3501      	adds	r5, #1
 8003fb0:	e7c1      	b.n	8003f36 <_printf_common+0x3e>
 8003fb2:	2030      	movs	r0, #48	; 0x30
 8003fb4:	18e1      	adds	r1, r4, r3
 8003fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fc0:	4422      	add	r2, r4
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fc8:	e7c2      	b.n	8003f50 <_printf_common+0x58>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4649      	mov	r1, r9
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	47c0      	blx	r8
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d0e6      	beq.n	8003fa6 <_printf_common+0xae>
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7d9      	b.n	8003f90 <_printf_common+0x98>

08003fdc <_printf_i>:
 8003fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe0:	7e0f      	ldrb	r7, [r1, #24]
 8003fe2:	4691      	mov	r9, r2
 8003fe4:	2f78      	cmp	r7, #120	; 0x78
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	469a      	mov	sl, r3
 8003fec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ff2:	d807      	bhi.n	8004004 <_printf_i+0x28>
 8003ff4:	2f62      	cmp	r7, #98	; 0x62
 8003ff6:	d80a      	bhi.n	800400e <_printf_i+0x32>
 8003ff8:	2f00      	cmp	r7, #0
 8003ffa:	f000 80d5 	beq.w	80041a8 <_printf_i+0x1cc>
 8003ffe:	2f58      	cmp	r7, #88	; 0x58
 8004000:	f000 80c1 	beq.w	8004186 <_printf_i+0x1aa>
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800400c:	e03a      	b.n	8004084 <_printf_i+0xa8>
 800400e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004012:	2b15      	cmp	r3, #21
 8004014:	d8f6      	bhi.n	8004004 <_printf_i+0x28>
 8004016:	a101      	add	r1, pc, #4	; (adr r1, 800401c <_printf_i+0x40>)
 8004018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800401c:	08004075 	.word	0x08004075
 8004020:	08004089 	.word	0x08004089
 8004024:	08004005 	.word	0x08004005
 8004028:	08004005 	.word	0x08004005
 800402c:	08004005 	.word	0x08004005
 8004030:	08004005 	.word	0x08004005
 8004034:	08004089 	.word	0x08004089
 8004038:	08004005 	.word	0x08004005
 800403c:	08004005 	.word	0x08004005
 8004040:	08004005 	.word	0x08004005
 8004044:	08004005 	.word	0x08004005
 8004048:	0800418f 	.word	0x0800418f
 800404c:	080040b5 	.word	0x080040b5
 8004050:	08004149 	.word	0x08004149
 8004054:	08004005 	.word	0x08004005
 8004058:	08004005 	.word	0x08004005
 800405c:	080041b1 	.word	0x080041b1
 8004060:	08004005 	.word	0x08004005
 8004064:	080040b5 	.word	0x080040b5
 8004068:	08004005 	.word	0x08004005
 800406c:	08004005 	.word	0x08004005
 8004070:	08004151 	.word	0x08004151
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	602a      	str	r2, [r5, #0]
 800407c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004084:	2301      	movs	r3, #1
 8004086:	e0a0      	b.n	80041ca <_printf_i+0x1ee>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	0607      	lsls	r7, r0, #24
 800408e:	f103 0104 	add.w	r1, r3, #4
 8004092:	6029      	str	r1, [r5, #0]
 8004094:	d501      	bpl.n	800409a <_printf_i+0xbe>
 8004096:	681e      	ldr	r6, [r3, #0]
 8004098:	e003      	b.n	80040a2 <_printf_i+0xc6>
 800409a:	0646      	lsls	r6, r0, #25
 800409c:	d5fb      	bpl.n	8004096 <_printf_i+0xba>
 800409e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040a2:	2e00      	cmp	r6, #0
 80040a4:	da03      	bge.n	80040ae <_printf_i+0xd2>
 80040a6:	232d      	movs	r3, #45	; 0x2d
 80040a8:	4276      	negs	r6, r6
 80040aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ae:	230a      	movs	r3, #10
 80040b0:	4859      	ldr	r0, [pc, #356]	; (8004218 <_printf_i+0x23c>)
 80040b2:	e012      	b.n	80040da <_printf_i+0xfe>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	6820      	ldr	r0, [r4, #0]
 80040b8:	1d19      	adds	r1, r3, #4
 80040ba:	6029      	str	r1, [r5, #0]
 80040bc:	0605      	lsls	r5, r0, #24
 80040be:	d501      	bpl.n	80040c4 <_printf_i+0xe8>
 80040c0:	681e      	ldr	r6, [r3, #0]
 80040c2:	e002      	b.n	80040ca <_printf_i+0xee>
 80040c4:	0641      	lsls	r1, r0, #25
 80040c6:	d5fb      	bpl.n	80040c0 <_printf_i+0xe4>
 80040c8:	881e      	ldrh	r6, [r3, #0]
 80040ca:	2f6f      	cmp	r7, #111	; 0x6f
 80040cc:	bf0c      	ite	eq
 80040ce:	2308      	moveq	r3, #8
 80040d0:	230a      	movne	r3, #10
 80040d2:	4851      	ldr	r0, [pc, #324]	; (8004218 <_printf_i+0x23c>)
 80040d4:	2100      	movs	r1, #0
 80040d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040da:	6865      	ldr	r5, [r4, #4]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	bfa8      	it	ge
 80040e0:	6821      	ldrge	r1, [r4, #0]
 80040e2:	60a5      	str	r5, [r4, #8]
 80040e4:	bfa4      	itt	ge
 80040e6:	f021 0104 	bicge.w	r1, r1, #4
 80040ea:	6021      	strge	r1, [r4, #0]
 80040ec:	b90e      	cbnz	r6, 80040f2 <_printf_i+0x116>
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	d04b      	beq.n	800418a <_printf_i+0x1ae>
 80040f2:	4615      	mov	r5, r2
 80040f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80040f8:	fb03 6711 	mls	r7, r3, r1, r6
 80040fc:	5dc7      	ldrb	r7, [r0, r7]
 80040fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004102:	4637      	mov	r7, r6
 8004104:	42bb      	cmp	r3, r7
 8004106:	460e      	mov	r6, r1
 8004108:	d9f4      	bls.n	80040f4 <_printf_i+0x118>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d10b      	bne.n	8004126 <_printf_i+0x14a>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	07de      	lsls	r6, r3, #31
 8004112:	d508      	bpl.n	8004126 <_printf_i+0x14a>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	6861      	ldr	r1, [r4, #4]
 8004118:	4299      	cmp	r1, r3
 800411a:	bfde      	ittt	le
 800411c:	2330      	movle	r3, #48	; 0x30
 800411e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004122:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004126:	1b52      	subs	r2, r2, r5
 8004128:	6122      	str	r2, [r4, #16]
 800412a:	464b      	mov	r3, r9
 800412c:	4621      	mov	r1, r4
 800412e:	4640      	mov	r0, r8
 8004130:	f8cd a000 	str.w	sl, [sp]
 8004134:	aa03      	add	r2, sp, #12
 8004136:	f7ff fedf 	bl	8003ef8 <_printf_common>
 800413a:	3001      	adds	r0, #1
 800413c:	d14a      	bne.n	80041d4 <_printf_i+0x1f8>
 800413e:	f04f 30ff 	mov.w	r0, #4294967295
 8004142:	b004      	add	sp, #16
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f043 0320 	orr.w	r3, r3, #32
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	2778      	movs	r7, #120	; 0x78
 8004152:	4832      	ldr	r0, [pc, #200]	; (800421c <_printf_i+0x240>)
 8004154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	6829      	ldr	r1, [r5, #0]
 800415c:	061f      	lsls	r7, r3, #24
 800415e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004162:	d402      	bmi.n	800416a <_printf_i+0x18e>
 8004164:	065f      	lsls	r7, r3, #25
 8004166:	bf48      	it	mi
 8004168:	b2b6      	uxthmi	r6, r6
 800416a:	07df      	lsls	r7, r3, #31
 800416c:	bf48      	it	mi
 800416e:	f043 0320 	orrmi.w	r3, r3, #32
 8004172:	6029      	str	r1, [r5, #0]
 8004174:	bf48      	it	mi
 8004176:	6023      	strmi	r3, [r4, #0]
 8004178:	b91e      	cbnz	r6, 8004182 <_printf_i+0x1a6>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	f023 0320 	bic.w	r3, r3, #32
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	2310      	movs	r3, #16
 8004184:	e7a6      	b.n	80040d4 <_printf_i+0xf8>
 8004186:	4824      	ldr	r0, [pc, #144]	; (8004218 <_printf_i+0x23c>)
 8004188:	e7e4      	b.n	8004154 <_printf_i+0x178>
 800418a:	4615      	mov	r5, r2
 800418c:	e7bd      	b.n	800410a <_printf_i+0x12e>
 800418e:	682b      	ldr	r3, [r5, #0]
 8004190:	6826      	ldr	r6, [r4, #0]
 8004192:	1d18      	adds	r0, r3, #4
 8004194:	6961      	ldr	r1, [r4, #20]
 8004196:	6028      	str	r0, [r5, #0]
 8004198:	0635      	lsls	r5, r6, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1c6>
 800419e:	6019      	str	r1, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1cc>
 80041a2:	0670      	lsls	r0, r6, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1c2>
 80041a6:	8019      	strh	r1, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4615      	mov	r5, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7bc      	b.n	800412a <_printf_i+0x14e>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	602a      	str	r2, [r5, #0]
 80041b8:	681d      	ldr	r5, [r3, #0]
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 f859 	bl	8004274 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1ec>
 80041c4:	1b40      	subs	r0, r0, r5
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e7aa      	b.n	800412a <_printf_i+0x14e>
 80041d4:	462a      	mov	r2, r5
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ad      	beq.n	800413e <_printf_i+0x162>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x234>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a6      	b.n	8004142 <_printf_i+0x166>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09d      	beq.n	800413e <_printf_i+0x162>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x218>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x20c>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x228>
 8004218:	0800442f 	.word	0x0800442f
 800421c:	08004440 	.word	0x08004440

08004220 <memmove>:
 8004220:	4288      	cmp	r0, r1
 8004222:	b510      	push	{r4, lr}
 8004224:	eb01 0402 	add.w	r4, r1, r2
 8004228:	d902      	bls.n	8004230 <memmove+0x10>
 800422a:	4284      	cmp	r4, r0
 800422c:	4623      	mov	r3, r4
 800422e:	d807      	bhi.n	8004240 <memmove+0x20>
 8004230:	1e43      	subs	r3, r0, #1
 8004232:	42a1      	cmp	r1, r4
 8004234:	d008      	beq.n	8004248 <memmove+0x28>
 8004236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800423a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800423e:	e7f8      	b.n	8004232 <memmove+0x12>
 8004240:	4601      	mov	r1, r0
 8004242:	4402      	add	r2, r0
 8004244:	428a      	cmp	r2, r1
 8004246:	d100      	bne.n	800424a <memmove+0x2a>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800424e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004252:	e7f7      	b.n	8004244 <memmove+0x24>

08004254 <_sbrk_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	; (8004270 <_sbrk_r+0x1c>)
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fc ff26 	bl	80010b0 <_sbrk>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_sbrk_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_sbrk_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20000320 	.word	0x20000320

08004274 <memchr>:
 8004274:	4603      	mov	r3, r0
 8004276:	b510      	push	{r4, lr}
 8004278:	b2c9      	uxtb	r1, r1
 800427a:	4402      	add	r2, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	4618      	mov	r0, r3
 8004280:	d101      	bne.n	8004286 <memchr+0x12>
 8004282:	2000      	movs	r0, #0
 8004284:	e003      	b.n	800428e <memchr+0x1a>
 8004286:	7804      	ldrb	r4, [r0, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	428c      	cmp	r4, r1
 800428c:	d1f6      	bne.n	800427c <memchr+0x8>
 800428e:	bd10      	pop	{r4, pc}

08004290 <memcpy>:
 8004290:	440a      	add	r2, r1
 8004292:	4291      	cmp	r1, r2
 8004294:	f100 33ff 	add.w	r3, r0, #4294967295
 8004298:	d100      	bne.n	800429c <memcpy+0xc>
 800429a:	4770      	bx	lr
 800429c:	b510      	push	{r4, lr}
 800429e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a2:	4291      	cmp	r1, r2
 80042a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042a8:	d1f9      	bne.n	800429e <memcpy+0xe>
 80042aa:	bd10      	pop	{r4, pc}

080042ac <_realloc_r>:
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b0:	4680      	mov	r8, r0
 80042b2:	4614      	mov	r4, r2
 80042b4:	460e      	mov	r6, r1
 80042b6:	b921      	cbnz	r1, 80042c2 <_realloc_r+0x16>
 80042b8:	4611      	mov	r1, r2
 80042ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042be:	f7ff bc37 	b.w	8003b30 <_malloc_r>
 80042c2:	b92a      	cbnz	r2, 80042d0 <_realloc_r+0x24>
 80042c4:	f7ff fbcc 	bl	8003a60 <_free_r>
 80042c8:	4625      	mov	r5, r4
 80042ca:	4628      	mov	r0, r5
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f000 f81b 	bl	800430a <_malloc_usable_size_r>
 80042d4:	4284      	cmp	r4, r0
 80042d6:	4607      	mov	r7, r0
 80042d8:	d802      	bhi.n	80042e0 <_realloc_r+0x34>
 80042da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042de:	d812      	bhi.n	8004306 <_realloc_r+0x5a>
 80042e0:	4621      	mov	r1, r4
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fc24 	bl	8003b30 <_malloc_r>
 80042e8:	4605      	mov	r5, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d0ed      	beq.n	80042ca <_realloc_r+0x1e>
 80042ee:	42bc      	cmp	r4, r7
 80042f0:	4622      	mov	r2, r4
 80042f2:	4631      	mov	r1, r6
 80042f4:	bf28      	it	cs
 80042f6:	463a      	movcs	r2, r7
 80042f8:	f7ff ffca 	bl	8004290 <memcpy>
 80042fc:	4631      	mov	r1, r6
 80042fe:	4640      	mov	r0, r8
 8004300:	f7ff fbae 	bl	8003a60 <_free_r>
 8004304:	e7e1      	b.n	80042ca <_realloc_r+0x1e>
 8004306:	4635      	mov	r5, r6
 8004308:	e7df      	b.n	80042ca <_realloc_r+0x1e>

0800430a <_malloc_usable_size_r>:
 800430a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430e:	1f18      	subs	r0, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	bfbc      	itt	lt
 8004314:	580b      	ldrlt	r3, [r1, r0]
 8004316:	18c0      	addlt	r0, r0, r3
 8004318:	4770      	bx	lr
	...

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
